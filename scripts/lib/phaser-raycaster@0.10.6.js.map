{"version":3,"file":"phaser-raycaster.min.js","mappings":"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","sources":["webpack://PhaserRaycaster/webpack/universalModuleDefinition","webpack://PhaserRaycaster/./src/main.js","webpack://PhaserRaycaster/./src/map/boundingBox.js","webpack://PhaserRaycaster/./src/map/config.js","webpack://PhaserRaycaster/./src/map/destroy.js","webpack://PhaserRaycaster/./src/map/map-circle-methods.js","webpack://PhaserRaycaster/./src/map/map-container-methods.js","webpack://PhaserRaycaster/./src/map/map-core.js","webpack://PhaserRaycaster/./src/map/map-line-methods.js","webpack://PhaserRaycaster/./src/map/map-matterBody-methods.js","webpack://PhaserRaycaster/./src/map/map-polygon-methods.js","webpack://PhaserRaycaster/./src/map/map-rectangle-methods.js","webpack://PhaserRaycaster/./src/map/map-tilemap-methods.js","webpack://PhaserRaycaster/./src/map/segmentsCount.js","webpack://PhaserRaycaster/./src/ray/angle.js","webpack://PhaserRaycaster/./src/ray/cast.js","webpack://PhaserRaycaster/./src/ray/castCircle.js","webpack://PhaserRaycaster/./src/ray/castCone.js","webpack://PhaserRaycaster/./src/ray/cone.js","webpack://PhaserRaycaster/./src/ray/config.js","webpack://PhaserRaycaster/./src/ray/debug.js","webpack://PhaserRaycaster/./src/ray/destroy.js","webpack://PhaserRaycaster/./src/ray/enablePhysics.js","webpack://PhaserRaycaster/./src/ray/matter-physics-methods.js","webpack://PhaserRaycaster/./src/ray/origin.js","webpack://PhaserRaycaster/./src/ray/overlap.js","webpack://PhaserRaycaster/./src/ray/range.js","webpack://PhaserRaycaster/./src/ray/ray-core.js","webpack://PhaserRaycaster/./src/ray/ray.js","webpack://PhaserRaycaster/./src/ray/slice.js","webpack://PhaserRaycaster/./src/ray/stats.js","webpack://PhaserRaycaster/./src/raycaster-core.js","webpack://PhaserRaycaster/webpack/bootstrap","webpack://PhaserRaycaster/webpack/runtime/define property getters","webpack://PhaserRaycaster/webpack/runtime/hasOwnProperty shorthand","webpack://PhaserRaycaster/webpack/runtime/make namespace object","webpack://PhaserRaycaster/webpack/startup"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"PhaserRaycaster\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"PhaserRaycaster\"] = factory();\n\telse\n\t\troot[\"PhaserRaycaster\"] = factory();\n})(self, function() {\nreturn ","/**\n* @author       Marcin Walczak <contact@marcin-walczak.pl>\n* @copyright    2022 Marcin Walczak\n* @license      {@link https://github.com/wiserim/phaser-raycaster/blob/master/LICENSE|MIT License}\n*/\n\n/**\n * Point object\n * @typedef {Object} Point\n * @property {number} x\n * @property {number} y\n */\n \n/**\n * @classdesc\n *\n * Raycaster plugin class.\n * \n * @namespace PhaserRaycaster\n * @class PhaserRaycaster\n * @extends Phaser.Plugins.ScenePlugin\n * @constructor\n * @since 6.0.0\n *\n * @param {Phaser.Scene} scene\n * @param {Phaser.Plugins.PluginManager} pluginManager\n */\n\nclass PhaserRaycaster extends Phaser.Plugins.ScenePlugin {\n    constructor(scene, pluginManager) {\n        super(scene, pluginManager);\n\n        this._Raycaster = require('./raycaster-core.js').Raycaster;\n    }\n\n    /**\n    * Create Raycaster object.\n    *\n    * @method PhaserRaycaster#createRaycaster\n    * @memberof PhaserRaycaster\n    * @instance\n    * @since 0.6.0\n    *\n    * @param {object} [options] - Raycaster's congfiguration options. May include:\n    * @param {number} [options.mapSegmentCount = 0] - Number of segments of circle maps. If set to 0, map will be teste\n    * @param {(object|object[])} [options.objects] - Game object or array of game objects to map.\n    * @param {Phaser.Geom.Rectangle} [options.boundingBox] - Raycaster's bounding box. If not passed, {@link Raycaster Raycaster} will set it's bounding box based on Arcade Physics / Matter physics world bounds.\n    * @param {boolean} [options.autoUpdate = true] - If set true, automatically update dynamic maps on scene update event.\n    * @param {boolean|object} [options.debug] - Enable debug mode or configure it {@link Raycaster#debugOptions debugOptions}.\n    *\n    * @return {Raycaster} {@link Raycaster Raycaster} instance\n    */\n    createRaycaster(options = {}) {\n        options.scene = this.scene;\n        return new this._Raycaster(options);\n    }\n}\n\n//Make sure you export the plugin for webpack to expose\nmodule.exports = PhaserRaycaster;","/**\n* Get mapped object's bounding box.\n*\n* @method Raycaster.Map#matterBody.getBoundingBox\n* @memberof Raycaster.Map\n* @instance\n* @private\n* @since 0.9.0\n*\n* @return {Phaser.Geom.Rectangle} - Mapped object's bounding box.\n*/\nexport function getBoundingBox() {\n    return this.object.getBounds();\n}\n","let rectangle = require('./map-rectangle-methods.js');\nlet line = require('./map-line-methods.js');\nlet polygon = require('./map-polygon-methods.js');\nlet arc = require('./map-circle-methods.js');\nlet container = require('./map-container-methods.js');\nlet tilemap = require('./map-tilemap-methods.js');\nlet matterBody = require('./map-matterBody-methods.js');\nlet segmentCount = require('./segmentsCount.js');\nlet boundingBox = require('./boundingBox.js');\n\n/**\n * Configure map.\n *\n * @method Raycaster.Map#config\n * @memberof Raycaster.Map\n * @instance\n * @since 0.6.0\n *\n * @param {object} [options] - Map's congfiguration options. May include:\n * @param {object} options.object - Game object to map\n * @param {string} [options.type] - Map type. If not defined, it will be determined based on object.\n * @param {boolean} [options.dynamic = false] - If set true, map will be dynamic (updated on scene update event).\n * @param {boolean} [options.active = true] - If set true, map will be active (will provide points, segments and will be updated).\n * @param {number} [options.segmentCount] - Circle map's segment count. If set to 0, map won't be generating segments and relay only on tangent points calculated for currently testing ray.\n * @param {object} [options.mapChild] - Container's child. If set, only set child will be mapped.\n * @param {boolean} [options.forceConvex] - If set true, matter body map will use convex body (hull) for non-covex bodies.\n * @param {boolean} [options.forceVerticesMapping] - If set true, matter body map will use only vertices for mapping circle bodies.\n * \n * @return {Raycaster.Map} {@link Raycaster.Map Raycaster.Map} instance\n */\nexport function config(options) {\n    this.object = options.object;\n    //object type\n    if(options.type === undefined)\n        options.type = options.object.type;\n    if(options.type === 'body' || options.type === 'composite')\n        options.type = 'MatterBody';\n    this.type = options.type;\n    \n    switch(options.type) {\n        case 'Polygon':\n            this.getPoints = polygon.getPoints;\n            this.getSegments = polygon.getSegments;\n            this.getBoundingBox = boundingBox.getBoundingBox;\n            this.updateMap = polygon.updateMap;\n            break;\n        case 'Arc':\n            //circle segments count\n            this.segmentCount = (options.segmentCount) ? options.segmentCount : 0;\n            this.circle = (options.segmentCount) ? false : true;\n            this.getPoints = arc.getPoints;\n            this.getSegments = arc.getSegments;\n            this.getBoundingBox = boundingBox.getBoundingBox;\n            this.updateMap = arc.updateMap;\n            this.setSegmentCount = segmentCount.setSegmentCount;\n            break;\n        case 'Line':\n            this.getPoints = line.getPoints;\n            this.getSegments = line.getSegments;\n            this.getBoundingBox = boundingBox.getBoundingBox;\n            this.updateMap = line.updateMap;\n            break;\n        case 'Container':\n            //container's child\n            this.mapChild = (options.mapChild) ? options.mapChild : null;\n            //circle segments count\n            this.segmentCount = (options.segmentCount) ? options.segmentCount : 0;\n            //transformed container's circle children\n            this._circles = [];\n            this.getPoints = container.getPoints;\n            this.getSegments = container.getSegments;\n            this.getBoundingBox = boundingBox.getBoundingBox;\n            this.updateMap = container.updateMap;\n            this._updateChildMap = container._updateChildMap;\n            this.setSegmentCount = segmentCount.setSegmentCount;\n            break;\n        case 'StaticTilemapLayer':\n            //ray colliding tiles\n            this.collisionTiles = (options.collisionTiles) ? options.collisionTiles : [];\n            this.getPoints = tilemap.getPoints;\n            this.getSegments = tilemap.getSegments;\n            this.getBoundingBox = boundingBox.getBoundingBox;\n            this.updateMap = tilemap.updateMap;\n            this.setCollisionTiles = tilemap.setCollisionTiles;\n            //reset tilemap origin\n            this.object.setOrigin(0,0);\n            break;\n        case 'DynamicTilemapLayer':\n            //ray colliding tiles\n            this.collisionTiles = (options.collisionTiles) ? options.collisionTiles : [];\n            this.getPoints = tilemap.getPoints;\n            this.getSegments = tilemap.getSegments;\n            this.getBoundingBox = boundingBox.getBoundingBox;\n            this.updateMap = tilemap.updateMap;\n            this.setCollisionTiles = tilemap.setCollisionTiles;\n            //reset tilemap origin\n            this.object.setOrigin(0,0);\n            break;\n        case 'TilemapLayer':\n            //ray colliding tiles\n            this.collisionTiles = (options.collisionTiles) ? options.collisionTiles : [];\n            this.getPoints = tilemap.getPoints;\n            this.getSegments = tilemap.getSegments;\n            this.getBoundingBox = boundingBox.getBoundingBox;\n            this.updateMap = tilemap.updateMap;\n            this.setCollisionTiles = tilemap.setCollisionTiles;\n            //reset tilemap origin\n            this.object.setOrigin(0,0);\n            break;\n        case 'MatterBody':\n            //force convex body (hull) mapping\n            this.forceConvex = (options.forceConvex) ? true : false;\n            //force mapping by vertices\n            this.forceVerticesMapping = (options.forceVerticesMapping) ? true : false;\n            this.circle = false;\n            this.getPoints = matterBody.getPoints;\n            this.getSegments = matterBody.getSegments;\n            this.getBoundingBox = matterBody.getBoundingBox;\n            this.updateMap = matterBody.updateMap;\n            break;\n        default:\n            this.getPoints = rectangle.getPoints;\n            this.getSegments = rectangle.getSegments;\n            this.getBoundingBox = boundingBox.getBoundingBox;\n            this.updateMap = rectangle.updateMap;\n    }\n\n    //if object is not supported\n    if(this.type != 'MatterBody' && typeof this.object.getBounds !== 'function') {\n        this.notSupported = true;\n    }\n\n    //dynamic map\n    this.dynamic = (options.dynamic == true) ? true : false;\n\n    //enable/disable map\n    this.active = (options.active !== undefined) ? options.active : true;\n\n    return this;\n}\n","/**\r\n * Destroy object\r\n *\r\n * @method Raycaster.Map#destroy\r\n * @memberof Raycaster.Map\r\n * @instance\r\n * @since 0.10.3\r\n */\r\n export function destroy() {\r\n    //destroy reference to map object in mapped object\r\n    if(this.object.type === 'body' || this.object.type === 'composite') {\r\n        delete object.raycasterMap;\r\n    }\r\n    else if(this.object.data) {\r\n        this.object.data.remove('raycasterMap');\r\n    }\r\n\r\n    for(let key in this) {\r\n        delete this[key];\r\n    }\r\n }","/*Map methods for circles*/\n/**\n* Get array of mapped circle's vertices used as rays targets.\n* If {@link Raycaster.Map#segmentCount Raycaster.Map#segmentCount} is set to 0, it'll calculatoe tangent points for passed ray.\n*\n* @method Raycaster.Map#arc.getPoints\n* @memberof Raycaster.Map\n* @instance\n* @private\n* @since 0.6.0\n*\n* @param {Raycaster.Ray} [ray] - {Raycaster.Ray} object used in some some types of maps.\n*\n* @return {Phaser.Geom.Point[]} - Array of mapped object's vertices.\n*/\nexport function getPoints(ray = false) {\n    if(!this.active)\n        return [];\n\n    if(this._points.length > 0)\n        return this._points;\n    \n    let points = [];\n    let offset = new Phaser.Geom.Point();\n    offset.x = this.object.x - this.object.displayWidth * (this.object.originX - 0.5);\n    offset.y = this.object.y - this.object.displayHeight * (this.object.originY - 0.5);\n\n    //calculate tangent rays\n    if(ray) {\n        let rayA = new Phaser.Geom.Line();\n        let rayB = new Phaser.Geom.Line();\n        let c;\n        \n        let rotation = this.object.rotation;\n        \n        if(rotation !== 0) {\n            let vector = new Phaser.Geom.Line(this.object.x, this.object.y, offset.x, offset.y);\n            Phaser.Geom.Line.SetToAngle(vector, this.object.x, this.object.y, Phaser.Geom.Line.Angle(vector) + rotation, Phaser.Geom.Line.Length(vector));\n            let cB = vector.getPointB();\n            c = new Phaser.Geom.Line(ray.origin.x, ray.origin.y, cB.x, cB.y);\n        }\n        else { \n            c = new Phaser.Geom.Line(ray.origin.x, ray.origin.y, offset.x, offset.y);\n        }\n\n        let rayLength = Math.sqrt(Math.pow(Phaser.Geom.Line.Length(c), 2) - Math.pow(this.object.radius * this.object.scaleX, 2));\n\n        //ray angle\n        let angle = Phaser.Geom.Line.Angle(c);\n        let dAngle = Math.asin((this.object.radius * this.object.scaleX) / Phaser.Geom.Line.Length(c));\n        Phaser.Geom.Line.SetToAngle(rayA, ray.origin.x, ray.origin.y, angle - dAngle, rayLength);\n        Phaser.Geom.Line.SetToAngle(rayB, ray.origin.x, ray.origin.y, angle + dAngle, rayLength);\n\n        //adding tangent points\n        points.push(rayA.getPointB());\n        points.push(rayB.getPointB());\n    }\n\n    return points;\n};\n\n/**\n* Get array of mapped circle's segments used to test object's intersection with ray.\n* If {@link Raycaster.Map#segmentCount Raycaster.Map#segmentCount} is set to 0, it'll return empty array.\n*\n* @method Raycaster.Map#arc.getSegments\n* @memberof Raycaster.Map\n* @instance\n* @private\n* @since 0.6.0\n*\n* @return {Phaser.Geom.Line[]} - Array of mapped object's segments.\n*/\nexport function getSegments() {\n    if(!this.active)\n        return [];\n    return this._segments;\n};\n\n/**\n* Update circles's map of points and segments.\n*\n* @method Raycaster.Map#arc.updateMap\n* @memberof Raycaster.Map\n* @instance\n* @private\n* @since 0.6.0\n*\n* @return {Raycaster.Map} {@link Raycaster.Map Raycaster.Map} instance\n*/\nexport function updateMap() {\n    if(!this.active)\n        return this;\n\n    if(!this.segmentCount) {\n        this._points = [];\n        this._segments = [];\n        return this;\n    }\n    \n    //calculate offset based on object position and origin point\n    let offset = new Phaser.Geom.Point();\n    offset.x = this.object.x - this.object.displayWidth * this.object.originX + this.object.radius * this.object.scaleX;\n    offset.y = this.object.y - this.object.displayHeight * this.object.originY + this.object.radius * this.object.scaleY;\n\n    //get points surrounding circle\n    let points = this.object.geom.getPoints(this.segmentCount);\n    let segments = []\n\n    //set points\n    //calculate positions after object's rotation\n    let rotation = this.object.rotation;\n    if(rotation !== 0) {\n        let newPoints = [];\n        for(let point of points) {\n            let vector = new Phaser.Geom.Line(this.object.x, this.object.y, this.object.x + (point.x + this.object.radius) * this.object.scaleX, this.object.y + (point.y + this.object.radius) * this.object.scaleY);\n            Phaser.Geom.Line.SetToAngle(vector, this.object.x, this.object.y, Phaser.Geom.Line.Angle(vector) + rotation, Phaser.Geom.Line.Length(vector));\n            newPoints.push(vector.getPointB());\n        }\n        points = newPoints;\n    }\n    //if rotation === 0\n    else {\n        for(let point of points) {\n            point.x = point.x * this.object.scaleX + offset.x;\n            point.y = point.y * this.object.scaleY + offset.y;\n        }\n    }\n\n    //set segments\n    for(let i = 0, length = points.length; i < length; i++) {\n        if(i+1 < length)\n        segments.push(new Phaser.Geom.Line(points[i].x, points[i].y, points[i+1].x, points[i+1].y));\n        else\n        segments.push(new Phaser.Geom.Line(points[i].x, points[i].y, points[0].x, points[0].y));\n    }\n\n    this._points = points;\n    this._segments = segments;\n    return this;\n};\n","/*Map methods for containers*/\n/**\n* Get array of mapped container's and its children vertices used as rays targets.\n*\n* @method Raycaster.Map#container.getPoints\n* @memberof Raycaster.Map\n* @instance\n* @private\n* @since 0.7.1\n*\n* @param {Raycaster.Ray} [ray] - {Raycaster.Ray} object used in some some types of maps.\n* @param {boolean} [isChild] - Flag definig if it is child container.\n*\n* @return {Phaser.Geom.Point[]} - Array of mapped object's vertices.\n*/\nexport function getPoints(ray = false, isChild = false) {\n    if(!this.active)\n        return [];\n\n    let points = this._points;\n    //calculate offset based on container position and origin point\n    let offset = new Phaser.Geom.Point();\n    offset.x = this.object.x - this.object.displayWidth * this.object.originX;\n    offset.y = this.object.y - this.object.displayHeight * this.object.originY;\n\n    //get tangent points of container's circles\n    if(this.segmentCount == 0 && !isChild) {\n        if(ray) {\n            //create temporary ray\n            let vector = new Phaser.Geom.Line(0, 0, ray.origin.x - offset.x, ray.origin.y - offset.y);\n            Phaser.Geom.Line.SetToAngle(vector, 0, 0, Phaser.Geom.Line.Angle(vector) - this.object.rotation, Phaser.Geom.Line.Length(vector));\n    \n            let tempRay = ray._raycaster.createRay({\n                origin: {\n                    x: vector.getPointB().x,\n                    y: vector.getPointB().y\n                }\n            });\n\n            //calculate tangent rays\n            let rayA = new Phaser.Geom.Line();\n            let rayB = new Phaser.Geom.Line();\n            let c;\n\n            for(let circle of this._circles) {\n                circle.points = [];\n                c = new Phaser.Geom.Line(ray.origin.x, ray.origin.y, circle.x, circle.y);\n\n                let rayLength = Math.sqrt(Math.pow(Phaser.Geom.Line.Length(c), 2) - Math.pow(circle.radius, 2));\n\n                //ray angle\n                let angle = Phaser.Geom.Line.Angle(c);\n                let dAngle = Math.asin((circle.radius) / Phaser.Geom.Line.Length(c));\n                Phaser.Geom.Line.SetToAngle(rayA, ray.origin.x, ray.origin.y, angle - dAngle, rayLength);\n                Phaser.Geom.Line.SetToAngle(rayB, ray.origin.x, ray.origin.y, angle + dAngle, rayLength);\n\n                //adding tangent points\n                circle.points.push(rayA.getPointB());\n                circle.points.push(rayB.getPointB());\n                points.push(rayA.getPointB());\n                points.push(rayB.getPointB());\n            }\n        }\n    }\n    \n    return points;\n};\n\n/**\n* Get array of mapped container's and its children segments used to test object's intersection with ray.\n*\n* @method Raycaster.Map#container.getSegments\n* @memberof Raycaster.Map\n* @instance\n* @private\n* @since 0.7.1\n*\n* @return {Phaser.Geom.Line[]} - Array of mapped object's segments.\n*/\nexport function getSegments() {\n    if(!this.active)\n        return [];\n\n    return this._segments;\n};\n\n/**\n* Update container's and its children maps of points and segments.\n*\n* @method Raycaster.Map#container.updateMap\n* @memberof Raycaster.Map\n* @instance\n* @private\n* @since 0.7.1\n*\n* @return {Raycaster.Map} {@link Raycaster.Map Raycaster.Map} instance\n*/\nexport function updateMap() {\n    if(!this.active)\n        return this;\n\n    let points = [];\n    let segments = [];\n    let container = this.object;\n    this._circles = [];\n\n    //calculate offset based on container position and origin point\n    let offset = new Phaser.Geom.Point();\n    offset.x = this.object.x - this.object.displayWidth * this.object.originX;\n    offset.y = this.object.y - this.object.displayHeight * this.object.originY;\n\n    let rotation = container.rotation;\n\n    if(this.mapChild) {\n        this._updateChildMap(this.mapChild, points, segments, rotation, offset);\n    }\n    else {\n        //iterate through container's children\n        container.iterate(function(child){\n            this._updateChildMap(child, points, segments, rotation, offset);\n        }.bind(this));\n\n        //get children intersections\n        for(let i = 0, iLength = container.list.length; i < iLength; i++){\n            let childA = container.list[i];\n            let mapA = childA.data.get('raycasterMap');\n            \n            if(!mapA)\n                continue;\n\n            for(let j = i+1, jLength = container.list.length; j < jLength; j++){\n                let childB = container.list[j];\n                let mapB = childB.data.get('raycasterMap');\n                //check if bounding boxes overlap\n                if(!mapB || !Phaser.Geom.Intersects.RectangleToRectangle(childA.getBounds(), childB.getBounds()))\n                    continue;\n\n                //find objects intersections\n                for(let segmentA of mapA.getSegments()) {\n                    for(let segmentB of mapB.getSegments()) {\n                        let intersection = [];\n                        if(!Phaser.Geom.Intersects.LineToLine(segmentA, segmentB, intersection))\n                            continue;\n                        \n                        //calculate positions after container's rotation\n                        if(rotation !== 0) {\n                            let vector = new Phaser.Geom.Line(container.x, container.y, intersection.x * container.scaleX + offset.x, intersection.y * container.scaleY + offset.y);\n                            Phaser.Geom.Line.SetToAngle(vector, this.object.x, this.object.y, Phaser.Geom.Line.Angle(vector) + rotation, Phaser.Geom.Line.Length(vector));\n                            points.push(vector.getPointB());\n                        }\n                        //if rotation === 0\n                        else\n                            points.push(new Phaser.Geom.Point(intersection.x * container.scaleX + offset.x, intersection.y * container.scaleX + offset.y));\n                    }\n                }\n            }\n        }\n    }\n\n    this._points = points;\n    this._segments = segments;\n\n    return this;\n};\n\n/**\n* Update container's child map of points and segments.\n*\n* @method Raycaster.Map#container._updateChildMap\n* @memberof Raycaster.Map\n* @instance\n* @private\n* @since 0.10.3\n*\n* @param {object} [child] - Container's child object.\n* @param {Phaser.Geom.Point[]} [points] - Container's mapped points.\n* @param {Phaser.Geom.Line[]} [segments] - Container's mapped segments.\n* @param {number} [rotation] - Container's rotation.\n* @param {Phaser.Geom.Point} [offset] - Container's offset.\n*/\nexport function _updateChildMap(child, points, segments, rotation, offset) {\n    if(!child.data)\n        child.setDataEnabled();\n\n    //if object is not supported\n    if(child.data.get('raycasterMapNotSupported'))\n        return;\n\n    //get child map\n    let map = child.data.get('raycasterMap');\n    if(!map) {\n        map = new this.constructor({\n            object: child,\n            segmentCount: this.segmentCount\n        });\n\n        if(map.notSupported) {\n            map.destroy();\n            child.data.set('raycasterMapNotSupported', true);\n            return;\n        }\n\n        child.data.set('raycasterMap', map);\n    }\n    else\n        map.updateMap();\n\n    //add child points\n    let childPoints = [];\n    for(let point of map.getPoints(false, true)) {\n        //calculate positions after container's rotation\n        if(rotation !== 0) {\n            let vector = new Phaser.Geom.Line(this.object.x, this.object.y, point.x * this.object.scaleX + offset.x, point.y * this.object.scaleY + offset.y);\n            Phaser.Geom.Line.SetToAngle(vector, this.object.x, this.object.y, Phaser.Geom.Line.Angle(vector) + rotation, Phaser.Geom.Line.Length(vector));\n            points.push(vector.getPointB());\n        }\n        //if rotation === 0\n        else\n            points.push(new Phaser.Geom.Point(point.x * this.object.scaleX + offset.x, point.y * this.object.scaleX + offset.y));\n\n        childPoints.push(points[points.length - 1])\n    }\n\n    //add child segments\n    for(let segment of map.getSegments()) {\n        //calculate positions after container's rotation\n        if(rotation !== 0) {\n            let pointA = segment.getPointA();\n            let pointB = segment.getPointB();\n            let vectorA = new Phaser.Geom.Line(this.object.x, this.object.y, pointA.x * this.object.scaleX + offset.x, pointA.y * this.object.scaleY + offset.y);\n            let vectorB = new Phaser.Geom.Line(this.object.x, this.object.y, pointB.x * this.object.scaleX + offset.x, pointB.y * this.object.scaleY + offset.y);\n            Phaser.Geom.Line.SetToAngle(vectorA, this.object.x, this.object.y, Phaser.Geom.Line.Angle(vectorA) + rotation, Phaser.Geom.Line.Length(vectorA));\n            Phaser.Geom.Line.SetToAngle(vectorB, this.object.x, this.object.y, Phaser.Geom.Line.Angle(vectorB) + rotation, Phaser.Geom.Line.Length(vectorB));\n\n            segments.push(new Phaser.Geom.Line(vectorA.getPointB().x, vectorA.getPointB().y, vectorB.getPointB().x, vectorB.getPointB().y));\n        }\n        //if rotation === 0\n        else\n            segments.push(new Phaser.Geom.Line(segment.getPointA().x * this.object.scaleX + offset.x, segment.getPointA().y * this.object.scaleY + offset.y, segment.getPointB().x * this.object.scaleX + offset.x, segment.getPointB().y * this.object.scaleY + offset.y));\n    }\n\n    //if child's map is a circle and this.segmentsCount == 0, store transformed circles in this._circles array.\n    if(map.type == 'Arc' && this.segmentCount == 0) {\n        let circleOffset = new Phaser.Geom.Point();\n        circleOffset.x = (map.object.x - map.object.displayWidth * (map.object.originX - 0.5)) * this.object.scaleX + offset.x;\n        circleOffset.y = (map.object.y - map.object.displayHeight * (map.object.originY - 0.5))  * this.object.scaleY + offset.y;\n\n        if(rotation !== 0) {\n            let vector = new Phaser.Geom.Line(this.object.x, this.object.y, circleOffset.x, circleOffset.y)\n            Phaser.Geom.Line.SetToAngle(vector, this.object.x, this.object.y, Phaser.Geom.Line.Angle(vector) + rotation, Phaser.Geom.Line.Length(vector));\n            circleOffset = vector.getPointB();\n        }\n\n        this._circles.push(new Phaser.Geom.Circle(circleOffset.x, circleOffset.y, map.object.radius * map.object.scaleX * this.object.scaleX));\n    }\n    else if(map.type === 'Container') {\n        for(let childMapCircle of map._circles) {\n            let circleOffset = new Phaser.Geom.Point();\n                circleOffset.x = childMapCircle.x * this.object.scaleX + offset.x;\n                circleOffset.y = childMapCircle.y * this.object.scaleY + offset.y;\n\n            if(rotation !== 0) {\n                let vector = new Phaser.Geom.Line(this.object.x, this.object.y, circleOffset.x, circleOffset.y)\n                Phaser.Geom.Line.SetToAngle(vector, this.object.x, this.object.y, Phaser.Geom.Line.Angle(vector) + rotation, Phaser.Geom.Line.Length(vector));\n                circleOffset = vector.getPointB();\n            }\n\n            this._circles.push(new Phaser.Geom.Circle(circleOffset.x, circleOffset.y, childMapCircle.radius * this.object.scaleX));\n        }\n    }\n}\n","/**\n * @classdesc\n *\n * Map class responsible for mapping game objects.\n *\n * @namespace Raycaster.Map\n * @class Raycaster.Map\n * @constructor\n * @since 6.0.0\n *\n * @param {object} options - Map specific configuration settings.\n * @param {Raycaster} [raycaster] - Parent raycaster object.\n */\nexport function Map(options, raycaster) {\n    /**\n    * Reference to parent Raycaster object.\n    *\n    * @name Raycaster.Map#_raycaster\n    * @type {Raycaster}\n    * @private\n    * @since 0.9.0\n    */\n    this._raycaster = raycaster ? raycaster : false;\n    /**\n    * Mapped object's type\n    *\n    * @name Raycaster.Map#type\n    * @type {string}\n    * @readonly\n    * @since 0.6.0\n    */\n    this.type;\n    /**\n    * If set true, map will be tested by ray. Otherwise it will be ignored.\n    *\n    * @name Raycaster.Map#active\n    * @type {boolean}\n    * @default true\n    * @since 0.7.2\n    */\n    this.active;\n    /**\n    * If set true, map will be automatically updated on scene update event.\n    *\n    * @name Raycaster.Map_dynamic\n    * @type {boolean}\n    * @default false\n    * @since 0.6.0\n    */\n    this._dynamic = false;\n    /**\n    * If set true, map will be treated by ray as circle. Set automaticalyy on map update.\n    *\n    * @name Raycaster.Map#circle\n    * @type {boolean}\n    * @default false\n    * @since 0.9.0\n    */\n    this.circle = false;\n    /**\n    * Reference to mapped object.\n    *\n    * @name Raycaster.Map#object\n    * @type {object}\n    * @readonly\n    * @since 0.6.0\n    */\n    this.object;\n    /**\n    * Array of mapped object's vertices used as rays targets.\n    *\n    * @name Raycaster.Map#_points\n    * @type {array}\n    * @private\n    * @since 0.6.0\n    */\n    this._points = [];\n    /**\n    * Array of mapped object's segments used to test object's intersection with ray.\n    *\n    * @name Raycaster.Map#_segments\n    * @type {array}\n    * @private\n    * @since 0.6.0\n    */\n    this._segments = [];\n    /**\n    * Get array of mapped object's vertices used as rays targets.\n    *\n    * @method Raycaster.Map#getPoints\n    * @memberof Raycaster.Map\n    * @instance\n    * @since 0.6.0\n    *\n    * @param {Raycaster.Ray} [ray] - {@link Raycaster.Ray Raycaster.Ray} object used in some some types of maps.\n    *\n    * @return {Phaser.Geom.Point[]} Array of mapped object's vertices.\n    */\n    this.getPoints;\n    /**\n    * Get array of mapped object's segments used to test object's intersection with ray.\n    *\n    * @method Raycaster.Map#getSegments\n    * @memberof Raycaster.Map\n    * @instance\n    * @since 0.6.0\n    *\n    * @param {Raycaster.Ray} [ray] - {@link Raycaster.Ray Raycaster.Ray} object used in some some types of maps.\n    *\n    * @return {Phaser.Geom.Line[]} Array of mapped object's segments.\n    */\n    this.getSegments;\n    /**\n    * Get mapped object's bounding box.\n    *\n    * @method Raycaster.Map#getBoundingBox\n    * @memberof Raycaster.Map\n    * @instance\n    * @since 0.9.0\n    *\n    * @return {Phaser.Geom.Rectangle} Mapped object's bounding box.\n    */\n    this.getBoundingBox;\n    /**\n    * Update object's map of points and segments.\n    *\n    * @method Raycaster.Map#updateMap\n    * @memberof Raycaster.Map\n    * @instance\n    * @since 0.6.0\n    *\n    * @return {Raycaster.Map} {@link Raycaster.Map Raycaster.Map} instance\n    */\n    this.updateMap;\n\n    this.config(options);\n    if(!this.notSupported)\n        this.updateMap();\n\n    return this;\n};\n\nMap.prototype = {\n    config: require('./config.js').config,\n    destroy: require('./destroy.js').destroy,\n    get dynamic() {\n        return this._dynamic;\n    },\n    set dynamic(dynamic) {\n        if(this._dynamic == dynamic)\n            return this;\n    \n        if(dynamic) {\n            this._dynamic = true;\n            \n            //add object to raycaster's dynamic objects list\n            if(this._raycaster) {\n                this._raycaster.dynamicMappedObjects.push(this.object);\n    \n                this._raycaster._stats.mappedObjects.dynamic = this._raycaster.dynamicMappedObjects.length;\n                this._raycaster._stats.mappedObjects.static = this._raycaster._stats.mappedObjects.total - this._raycaster._stats.mappedObjects.dynamic;\n            }\n        }\n        else {\n            this._dynamic = false;\n            \n            //remove object from reycasters' dynamic objects list\n            if(this._raycaster) {\n                let index = this._raycaster.dynamicMappedObjects.indexOf(this.object);\n                if(index >= 0)\n                    this._raycaster.dynamicMappedObjects.splice(index, 1);\n    \n                this._raycaster._stats.mappedObjects.dynamic = this._raycaster.dynamicMappedObjects.length;\n                this._raycaster._stats.mappedObjects.static = this._raycaster._stats.mappedObjects.total - this._raycaster._stats.mappedObjects.dynamic;\n            }\n        }\n    \n        return this;\n     }\n};\n\nMap.prototype.constructor = Map;\n","/*Map methods for lines*/\n/**\n* Get array of mapped line's vertices used as rays targets.\n*\n* @method Raycaster.Map#line.getPoints\n* @memberof Raycaster.Map\n* @instance\n* @private\n* @since 0.6.0\n*\n* @param {Raycaster.Ray} [ray] - {Raycaster.Ray} object used in some some types of maps.\n*\n* @return {Phaser.Geom.Point[]} - Array of mapped object's vertices.\n*/\nexport function getPoints(ray = false) {\n    if(!this.active)\n        return [];\n    return this._points;\n};\n\n/**\n* Get array of mapped line's segments used to test object's intersection with ray.\n*\n* @method Raycaster.Map#line.getSegments\n* @memberof Raycaster.Map\n* @instance\n* @private\n* @since 0.6.0\n*\n* @return {Phaser.Geom.Line[]} - Array of mapped object's segments.\n*/\nexport function getSegments() {\n    if(!this.active)\n        return [];\n    return this._segments;\n};\n\n/**\n* Update line's map of points and segments.\n*\n* @method Raycaster.Map#line.updateMap\n* @memberof Raycaster.Map\n* @instance\n* @private\n* @since 0.6.0\n*\n* @return {Raycaster.Map} {@link Raycaster.Map Raycaster.Map} instance\n*/\nexport function updateMap() {\n    if(!this.active)\n        return this;\n\n    let points = [];\n    let segments = [];\n    \n    //calculate offset based on object position and origin point\n    let offset = new Phaser.Geom.Point();\n    offset.x = this.object.x - this.object.displayWidth * this.object.originX;\n    offset.y = this.object.y - this.object.displayHeight * this.object.originY;\n    let pointA = this.object.geom.getPointA();\n    let pointB = this.object.geom.getPointB();\n\n    //calculate positions after object's rotation\n    let rotation = this.object.rotation;\n    if(rotation !== 0) {\n        let vectorA = new Phaser.Geom.Line(this.object.x, this.object.y, pointA.x * this.object.scaleX + offset.x, pointA.y * this.object.scaleY + offset.y);\n        Phaser.Geom.Line.SetToAngle(vectorA, this.object.x, this.object.y, Phaser.Geom.Line.Angle(vectorA) + rotation, Phaser.Geom.Line.Length(vectorA));\n        pointA = vectorA.getPointB();\n\n        let vectorB = new Phaser.Geom.Line(this.object.x, this.object.y, pointB.x * this.object.scaleX + offset.x, pointB.y * this.object.scaleY + offset.y);\n        Phaser.Geom.Line.SetToAngle(vectorB, this.object.x, this.object.y, Phaser.Geom.Line.Angle(vectorB) + rotation, Phaser.Geom.Line.Length(vectorB));\n        pointB = vectorB.getPointB();\n\n        //set points\n        points.push(new Phaser.Geom.Point(pointA.x, pointA.y));\n        points.push(new Phaser.Geom.Point(pointB.x, pointB.y));\n        //set segment\n        segments.push(new Phaser.Geom.Line(pointA.x, pointA.y, pointB.x, pointB.y));\n    }\n    //if rotation === 0\n    else {\n        //set points\n        points.push(new Phaser.Geom.Point(pointA.x * this.object.scaleX + offset.x, pointA.y * this.object.scaleY + offset.y));\n        points.push(new Phaser.Geom.Point(pointB.x * this.object.scaleX + offset.x, pointB.y * this.object.scaleY + offset.y));\n        //set segment\n        segments.push(new Phaser.Geom.Line(pointA.x * this.object.scaleX + offset.x, pointA.y * this.object.scaleY + offset.y, pointB.x + offset.x * this.object.scaleX, pointB.y * this.object.scaleY + offset.y));\n    }\n    \n\n    this._points = points;\n    this._segments = segments;\n    return this;\n};\n","/*Map methods for matter body*/\n/**\n* Get array of mapped matter body's vertices used as rays targets.\n*\n* @method Raycaster.Map#matterBody.getPoints\n* @memberof Raycaster.Map\n* @instance\n* @private\n* @since 0.9.0\n*\n* @param {Raycaster.Ray} [ray] - {Raycaster.Ray} object used in some some types of maps.\n*\n* @return {Phaser.Geom.Point[]} - Array of mapped object's vertices.\n*/\nexport function getPoints(ray = false) {\n    if(!this.active)\n        return [];\n\n    let body = this.object.type === 'body' || this.object.type === 'composite' ? this.object : this.object.body;\n\n    //calculate tangent rays\n    if(ray && !this.forceVerticesMapping && body.circleRadius > 0) {\n        let points = [];\n        let rayA = new Phaser.Geom.Line();\n        let rayB = new Phaser.Geom.Line();\n        let c = new Phaser.Geom.Line(ray.origin.x, ray.origin.y, body.position.x, body.position.y);\n\n        let rayLength = Math.sqrt(Math.pow(Phaser.Geom.Line.Length(c), 2) - Math.pow(body.circleRadius * body.scale.x, 2));\n\n        //ray angle\n        let angle = Phaser.Geom.Line.Angle(c);\n        let dAngle = Math.asin((body.circleRadius * body.scale.x) / Phaser.Geom.Line.Length(c));\n        Phaser.Geom.Line.SetToAngle(rayA, ray.origin.x, ray.origin.y, angle - dAngle, rayLength);\n        Phaser.Geom.Line.SetToAngle(rayB, ray.origin.x, ray.origin.y, angle + dAngle, rayLength);\n\n        //adding tangent points\n        points.push(rayA.getPointB());\n        points.push(rayB.getPointB());\n\n        return points;\n    }\n\n    return this._points;\n};\n\n/**\n* Get array of mapped matter body's segments used to test object's intersection with ray.\n*\n* @method Raycaster.Map#matterBody.getSegments\n* @memberof Raycaster.Map\n* @instance\n* @private\n* @since 0.9.0\n*\n* @return {Phaser.Geom.Line[]} - Array of mapped object's segments.\n*/\nexport function getSegments() {\n    if(!this.active)\n        return [];\n    return this._segments;\n};\n\n/**\n* Update matter body's map of points and segments.\n*\n* @method Raycaster.Map#matterBody.updateMap\n* @memberof Raycaster.Map\n* @instance\n* @private\n* @since 0.9.0\n*\n* @return {Raycaster.Map} {@link Raycaster.Map Raycaster.Map} instance\n*/\nexport function updateMap() {\n    if(!this.active)\n        return this;\n\n    let points = [];\n    let segments = [];\n    let body = this.object.type === 'body' || this.object.type === 'composite' ? this.object : this.object.body;\n    let bodies = [body];\n    let generateBounds = false;\n\n    if(body.circleRadius > 0 && !this.forceVerticesMapping) {\n        this.circle = true;\n        this._points = points;\n        this._segments = segments;\n\n        return this;\n    }\n\n    this.circle = false;\n\n    if(body.type == 'composite')\n        bodies = body.bodies;\n\n    if( ( body.bounds === undefined && body.type == 'composite' ) || ( body.type == 'composite' && this.dynamic ) ) {\n        generateBounds = true;\n    }\n    \n    for(let bodyItem of bodies) {\n        //if convex body\n        if(bodyItem.parts.length === 1 || this.forceConvex) {\n            let vertices = bodyItem.parts[0].vertices;\n\n            points.push(new Phaser.Geom.Point(vertices[0].x, vertices[0].y));\n\n            for(let i = 1, length = vertices.length; i < length; i++) {\n                let pointA = new Phaser.Geom.Point(vertices[i - 1].x, vertices[i - 1].y);\n                let pointB = new Phaser.Geom.Point(vertices[i].x, vertices[i].y);\n\n                points.push(pointB);\n\n                //add segment\n                let segment = new Phaser.Geom.Line(pointA.x, pointA.y, pointB.x, pointB.y);\n                segments.push(segment);\n            }\n\n            //closing segment\n            let segment = new Phaser.Geom.Line(vertices[vertices.length - 1].x, vertices[vertices.length - 1].y, vertices[0].x, vertices[0].y);\n            segments.push(segment);\n        }\n\n        //if concave body\n        else if(bodyItem.parts.length > 1) {\n            for(let i = 1, length = bodyItem.parts.length; i < length; i++) {\n                let vertices = bodyItem.parts[i].vertices;\n                let pointA = new Phaser.Geom.Point(vertices[0].x, vertices[0].y);\n\n                if(points.find(point => point.x == pointA.x && point.y == pointA.y) === undefined)\n                    points.push(pointA);\n\n                for(let j = 1, length = vertices.length; j < length; j++) {\n                    let pointB = new Phaser.Geom.Point(vertices[j].x, vertices[j].y);\n                    //check if segment was already added\n                    let segmentIndex = segments.findIndex(segment => (segment.x1 == pointA.x && segment.y1 == pointA.y && segment.x2 == pointB.x && segment.y2 == pointB.y) || (segment.x1 == pointB.x && segment.y1 == pointB.y && segment.x2 == pointA.x && segment.y2 == pointA.y));\n                    \n                    if(segmentIndex !== -1) {\n                        segments.splice(segmentIndex, 1);\n                        pointA = pointB;\n                        continue;\n                    }\n                    \n                    if(points.find(point => point.x == pointB.x && point.y == pointB.y) === undefined)\n                        points.push(pointB);\n\n                    //add segment\n                    let segment = new Phaser.Geom.Line(pointA.x, pointA.y, pointB.x, pointB.y);\n                    segments.push(segment);\n                    \n                    pointA = pointB;\n                }\n                \n                //closing segment\n                let closingSegment = new Phaser.Geom.Line(vertices[vertices.length - 1].x, vertices[vertices.length - 1].y, vertices[0].x, vertices[0].y);\n\n                let segmentIndex = segments.findIndex(segment => (segment.x1 == closingSegment.x1 && segment.y1 == closingSegment.y1 && segment.x2 == closingSegment.x2 && segment.y2 == closingSegment.y2) || (segment.x1 == closingSegment.x2 && segment.y1 == closingSegment.y2 && segment.x2 == closingSegment.x1 && segment.y2 == closingSegment.y1));\n                if(segmentIndex === undefined)\n                    segments.push(closingSegment);\n            }\n        }\n    }\n\n    this._points = points;\n    this._segments = segments;\n\n    if(generateBounds) {\n        let bounds = this._raycaster.scene.matter.composite.bounds(body);\n        body.bounds = bounds;\n    }\n\n    return this;\n};\n\n/**\n* Get matter body's bounding box.\n*\n* @method Raycaster.Map#matterBody.getBoundingBox\n* @memberof Raycaster.Map\n* @instance\n* @private\n* @since 0.9.0\n*\n* @return {Phaser.Geom.Rectangle} - Matter body's bounding box.\n*/\nexport function getBoundingBox() {\n    let bounds = this.object.type === 'body' || this.object.type === 'composite' ? this.object.bounds : this.object.body.bounds;\n\n    return new Phaser.Geom.Rectangle(bounds.min.x, bounds.min.y, bounds.max.x - bounds.min.x, bounds.max.y - bounds.min.y);\n}\n\n","/*Map methods for polygons*/\n/**\n* Get array of mapped polygon's vertices used as rays targets.\n*\n* @method Raycaster.Map#polygon.getPoints\n* @memberof Raycaster.Map\n* @instance\n* @private\n* @since 0.6.0\n*\n* @param {Raycaster.Ray} [ray] - {Raycaster.Ray} object used in some some types of maps.\n*\n* @return {Phaser.Geom.Point[]} - Array of mapped object's vertices.\n*/\nexport function getPoints(ray = false) {\n    if(!this.active)\n        return [];\n    return this._points;\n};\n\n/**\n* Get array of mapped polygon's segments used to test object's intersection with ray.\n*\n* @method Raycaster.Map#polygon.getSegments\n* @memberof Raycaster.Map\n* @instance\n* @private\n* @since 0.6.0\n*\n* @return {Phaser.Geom.Line[]} - Array of mapped object's segments.\n*/\nexport function getSegments() {\n    if(!this.active)\n        return [];\n    return this._segments;\n};\n\n/**\n* Update polygon's map of points and segments.\n*\n* @method Raycaster.Map#polygon.updateMap\n* @memberof Raycaster.Map\n* @instance\n* @private\n* @since 0.6.0\n*\n* @return {Raycaster.Map} {@link Raycaster.Map Raycaster.Map} instance\n*/\nexport function updateMap() {\n    if(!this.active)\n        return this;\n\n    let points = [];\n    let segments = [];\n    \n    //calculate offset based on object position and origin point\n    let offset = new Phaser.Geom.Point();\n    offset.x = this.object.x - this.object.displayWidth * this.object.originX;\n    offset.y = this.object.y - this.object.displayHeight * this.object.originY;\n    //set points\n    //calculate positions after object's rotation\n    let rotation = this.object.rotation;\n    if(rotation !== 0) {\n        for(let point of this.object.geom.points) {\n            let vector = new Phaser.Geom.Line(this.object.x, this.object.y, point.x * this.object.scaleX + offset.x, point.y * this.object.scaleY + offset.y);\n            Phaser.Geom.Line.SetToAngle(vector, this.object.x, this.object.y, Phaser.Geom.Line.Angle(vector) + rotation, Phaser.Geom.Line.Length(vector));\n            points.push(vector.getPointB());\n        }\n    }\n    //if rotation === 0\n    else {\n        for(let point of this.object.geom.points) {\n            points.push(new Phaser.Geom.Point(point.x * this.object.scaleX + offset.x, point.y * this.object.scaleY + offset.y));\n        }\n    }\n\n    //set segments\n    for(let i = 0, length = points.length; i < length; i++) {\n        if(i+1 < length)\n            segments.push(new Phaser.Geom.Line(points[i].x, points[i].y, points[i+1].x, points[i+1].y));   \n    }\n    //if polygon is closed\n    if(this.object.closePath) {\n        let last = points.length - 1;\n        segments.push(new Phaser.Geom.Line(points[last].x, points[last].y, points[0].x, points[0].y));\n    }\n\n    this._points = points;\n    this._segments = segments;\n\n    return this;\n};\n","/*Map methods for rectangles*/\n/**\n* Get array of mapped rectangle's vertices used as rays targets.\n*\n* @method Raycaster.Map#rectangle.getPoints\n* @memberof Raycaster.Map\n* @instance\n* @private\n* @since 0.6.0\n*\n* @param {Raycaster.Ray} [ray] - {Raycaster.Ray} object used in some some types of maps.\n*\n* @return {Phaser.Geom.Point[]} - Array of mapped object's vertices.\n*/\nexport function getPoints(ray = false) {\n    if(!this.active)\n        return [];\n    return this._points;\n};\n\n/**\n* Get array of mapped rectangle's segments used to test object's intersection with ray.\n*\n* @method Raycaster.Map#rectangle.getSegments\n* @memberof Raycaster.Map\n* @instance\n* @private\n* @since 0.6.0\n*\n* @return {Phaser.Geom.Line[]} - Array of mapped object's segments.\n*/\nexport function getSegments() {\n    if(!this.active)\n        return [];\n    return this._segments;\n};\n\n/**\n* Update rectangle's map of points and segments.\n*\n* @method Raycaster.Map#rectangle.updateMap\n* @memberof Raycaster.Map\n* @instance\n* @private\n* @since 0.6.0\n*\n* @return {Raycaster.Map} {@link Raycaster.Map Raycaster.Map} instance\n*/\nexport function updateMap() {\n    if(!this.active)\n        return this;\n        \n    let points = [];\n    let segments = [];\n\n    //set points\n    points = [\n        this.object.getTopLeft(),\n        this.object.getTopRight(),\n        this.object.getBottomRight(),\n        this.object.getBottomLeft()\n    ];\n\n    //set segments\n    for(let i = 0, length = points.length; i < length; i++) {\n        if(i+1 < length)\n        segments.push(new Phaser.Geom.Line(points[i].x, points[i].y, points[i+1].x, points[i+1].y));\n        else\n        segments.push(new Phaser.Geom.Line(points[i].x, points[i].y, points[0].x, points[0].y));\n    }\n\n    this._points = points;\n    this._segments = segments;\n\n    return this;\n};\n","/*Map methods for tilemaps*/\n/**\n* Get array of mapped tilemap's vertices used as rays targets.\n*\n* @method Raycaster.Map#tilemap.getPoints\n* @memberof Raycaster.Map\n* @instance\n* @private\n* @since 0.7.3\n*\n* @param {Raycaster.Ray} [ray] - {Raycaster.Ray} object used in some some types of maps.\n*\n* @return {Phaser.Geom.Point[]} - Array of mapped object's vertices.\n*/\nexport function getPoints(ray = false) {\n    if(!this.active)\n        return [];\n    if(!ray || ray && (ray.detectionRange == 0 || ray.detectionRange >= Phaser.Math.MAX_SAFE_INTEGER))\n        return this._points;\n\n    let points = [];\n    for(let point of this._points) {\n        if(Phaser.Math.Distance.Between(ray.origin.x, ray.origin.y, point.x, point.y) <= ray.detectionRange)\n            points.push(point);\n    }\n\n    //get intersections between tilemap's segments and ray's detection range edge\n    let segments = this.getSegments(ray);\n\n    for(let segment of segments) {\n        if(Phaser.Math.Distance.Between(ray.origin.x, ray.origin.y, segment.x1, segment.y1) > ray.detectionRange)\n            points.push(new Phaser.Geom.Point(segment.x1, segment.y1));\n        \n        if(Phaser.Math.Distance.Between(ray.origin.x, ray.origin.y, segment.x2, segment.y2) > ray.detectionRange)\n            points.push(new Phaser.Geom.Point(segment.x2, segment.y2));\n    }\n\n    return points;\n};\n\n/**\n* Get array of mapped tilemap's segments used to test object's intersection with ray.\n*\n* @method Raycaster.Map#tilemap.getSegments\n* @memberof Raycaster.Map\n* @instance\n* @private\n* @since 0.7.3\n*\n* @param {Raycaster.Ray} [ray] - {Raycaster.Ray} object used in some some types of maps.\n*\n* @return {Phaser.Geom.Line[]} - Array of mapped object's segments.\n*/\nexport function getSegments(ray = false) {\n    if(!this.active)\n        return [];\n    if(!ray || ray && (ray.detectionRange == 0 || ray.detectionRange >= Phaser.Math.MAX_SAFE_INTEGER))\n        return this._segments;\n\n    let segments = [];\n    for(let segment of this._segments) {\n        if(Phaser.Geom.Intersects.LineToCircle(segment, ray.detectionRangeCircle)) {\n            segments.push(segment);\n        }\n    }\n\n    return segments;\n};\n\n/**\n* Update tilemap's map of points and segments.\n*\n* @method Raycaster.Map#tilemap.updateMap\n* @memberof Raycaster.Map\n* @instance\n* @private\n* @since 0.7.3\n*\n* @return {Raycaster.Map} {@link Raycaster.Map Raycaster.Map} instance\n*/\nexport function updateMap() {\n    if(!this.active)\n        return this;\n\n    let points = [];\n    let segments = [];\n    \n    //calculate offset based on object position and origin point\n    let offset = new Phaser.Geom.Point();\n    offset.x = this.object.x;\n    offset.y = this.object.y;\n\n    let horizontal = false;\n    let horizontals = [];\n    let verticals = [];\n\n    //iterate rows\n    for(let i = 0, iLength = this.object.layer.data.length; i < iLength; i++) {\n        let row = this.object.layer.data[i];\n\n        //iterate row's tiles\n        for(let j = 0, jLength = row.length; j < jLength; j++) {\n            let tile = row[j];\n\n            //check if tile and its top and left neighbours have different are from different sets (rays blocking and non-bloking)\n            let upperEdge = ((i > 0 && this.collisionTiles.includes(this.object.layer.data[i-1][j].index) != this.collisionTiles.includes(tile.index)) || (i == 0 && this.collisionTiles.includes(tile.index))) ? true : false;\n            let leftEdge = ((j > 0 && this.collisionTiles.includes(this.object.layer.data[i][j-1].index) != this.collisionTiles.includes(tile.index)) || (j == 0 && this.collisionTiles.includes(tile.index))) ? true : false;\n\n            //get current tile's column last vertical line\n            let vertical = false;\n            if(verticals.length <= j)\n                verticals[j] = [];\n            else if(verticals[j].length > 0)\n                vertical = verticals[j][verticals[j].length - 1];\n\n            //check if tile has edge from left\n            if(leftEdge) {\n                if(vertical && vertical.y + vertical.height == i)\n                    vertical.height++;\n                else {\n                    verticals[j].push({\n                        x: tile.x,\n                        y: tile.y,\n                        height: 1\n                    });\n                }\n            }\n\n            //check if tile has edge from top\n            if(upperEdge) {\n                if(horizontal)\n                    horizontal.width++;\n                else\n                    horizontal = {\n                        x: tile.x,\n                        y: tile.y,\n                        width: 1\n                    };\n                continue;\n            }\n\n            if(horizontal) {\n                let x = horizontal.x * this.object.layer.tileWidth * this.object.scaleX + offset.x;\n                let y = horizontal.y * this.object.layer.tileHeight * this.object.scaleY + offset.y;\n                let segment = new Phaser.Geom.Line(x, y, x + this.object.layer.tileWidth * this.object.scaleX * horizontal.width, y);\n                segments.push(segment);\n                horizontals.push(segment);\n                points.push(new Phaser.Geom.Point(x, y));\n                points.push(new Phaser.Geom.Point(x + this.object.layer.tileWidth * this.object.scaleX * horizontal.width, y));\n                horizontal = false;\n            }\n        }\n        \n        //at the end of row add segment if exist\n        if(horizontal) {\n            let x = horizontal.x * this.object.layer.tileWidth * this.object.scaleX + offset.x;\n            let y = horizontal.y * this.object.layer.tileHeight * this.object.scaleY + offset.y;\n            let segment = new Phaser.Geom.Line(x, y, x + this.object.layer.tileWidth * this.object.scaleX * horizontal.width, y);\n            segments.push(segment);\n            horizontals.push(segment);\n            points.push(new Phaser.Geom.Point(x, y));\n            points.push(new Phaser.Geom.Point(x + this.object.layer.tileWidth * this.object.scaleX * horizontal.width, y));\n            horizontal = false;\n        }\n    }\n\n    //add bottom horizontal segments\n    for(let tile of this.object.layer.data[this.object.layer.data.length - 1]) {\n        if(this.collisionTiles.includes(tile.index)) {\n            if(horizontal)\n                horizontal.width++;\n            else\n                horizontal = {\n                    x: tile.x,\n                    y: tile.y + 1,\n                    width: 1\n                };\n            continue;\n        }\n\n        if(horizontal) {\n            let x = horizontal.x * this.object.layer.tileWidth * this.object.scaleX + offset.x;\n            let y = horizontal.y * this.object.layer.tileHeight * this.object.scaleY + offset.y;\n            let segment = new Phaser.Geom.Line(x, y, x + this.object.layer.tileWidth * this.object.scaleX * horizontal.width, y);\n            segments.push(segment);\n            horizontals.push(segment);\n            points.push(new Phaser.Geom.Point(x, y));\n            points.push(new Phaser.Geom.Point(x + this.object.layer.tileWidth * this.object.scaleX * horizontal.width, y));\n            horizontal = false;\n        }\n    }\n\n    //add segment if exist\n    if(horizontal) {\n        let x = horizontal.x * this.object.layer.tileWidth * this.object.scaleX + offset.x;\n        let y = horizontal.y * this.object.layer.tileHeight * this.object.scaleY + offset.y;\n        let segment = new Phaser.Geom.Line(x, y, x + this.object.layer.tileWidth * this.object.scaleX * horizontal.width, y);\n        segments.push(segment);\n        horizontals.push(segment);\n        points.push(new Phaser.Geom.Point(x, y));\n        points.push(new Phaser.Geom.Point(x + this.object.layer.tileWidth * this.object.scaleX * horizontal.width, y));\n        horizontal = false;\n    }\n    \n    //add right vertical segments\n    let vertical = false;\n    let verticalsLastColumn = [];\n    for(let row of this.object.layer.data) {\n        let tile = row[row.length - 1];\n\n        //if tile blocks ray\n        if(this.collisionTiles.includes(tile.index)) {\n            if(vertical) {\n                vertical.height++;\n            }\n            else {\n                vertical = {\n                    x: tile.x + 1,\n                    y: tile.y,\n                    height: 1\n                };\n            }\n\n            continue;\n        }\n\n        if(vertical) {\n            verticalsLastColumn.push(vertical);\n            vertical = false;\n        }\n    }\n\n    verticals.push(verticalsLastColumn);\n    \n    //add vertical segments\n    for(let column of verticals) {\n        if(!column)\n            continue;\n\n        for(let vertical of column) {\n            let x = vertical.x * this.object.layer.tileWidth * this.object.scaleX + offset.x;\n            let y1 = vertical.y * this.object.layer.tileHeight * this.object.scaleY + offset.y;\n            let y2 = y1 + this.object.layer.tileHeight * this.object.scaleY * vertical.height;\n            let segment = new Phaser.Geom.Line(x, y1, x, y2)\n            segments.push(segment);\n\n            //add points if they're not already there\n            if(!points.filter(point => point.x == x && point.y == y1))\n                points.push(new Phaser.Geom.Point(x, y));\n\n            if(!points.filter(point => point.x == x && point.y == y2))\n                points.push(new Phaser.Geom.Point(x, y));\n\n            //get intersections between horizontal segments and vertical\n            for(let horizontalSegment of horizontals) {\n                if(segment.x1 == horizontalSegment.x1 || segment.x1 == horizontalSegment.x2 || segment.x2 == horizontalSegment.x1 || segment.x2 == horizontalSegment.x2)\n                    continue;\n\n                if(segment.y1 == horizontalSegment.y1 || segment.y1 == horizontalSegment.y2 || segment.y2 == horizontalSegment.y1 || segment.y2 == horizontalSegment.y2)\n                    continue;\n\n                let point = new Phaser.Geom.Point();\n                if(Phaser.Geom.Intersects.LineToLine(segment, horizontalSegment, point)) {\n                    points.push(point);\n                }\n            }\n        }\n    }\n\n    this._points = points;\n    this._segments = segments;\n    return this;\n};\n\n/**\n* Set tile types which should be mapped (for Phaser.Tilemaps.StaticTilemapLayer and Phaser.Tilemaps.DynamicTilemapLayer maps only).\n*\n* @method Raycaster.Map#setCollisionTiles\n* @memberof Raycaster.Map\n* @instance\n* @since 0.7.3\n*\n* @param {array} [tiles = []] - Set of tile's indexes to map.\n*\n* @return {Raycaster.Map} {@link Raycaster.Map Raycaster.Map} instance\n*/\nexport function setCollisionTiles(tiles = []) {\n    this.collisionTiles = tiles;\n    return this;\n}\n","/**\n * Set segment count for cirle's map.\n * If set to 0, map won't be generating segments and relay only on tangent points calculated for currently testing ray.\n *\n * @method Raycaster.Map#setSegmentCount\n * @memberof Raycaster.Map\n * @instance\n * @since 0.6.0\n *\n * @param {number} count - Circle map's segment count.\n *\n * @return {Raycaster.Map} {@link Raycaster.Map Raycaster.Map} instance\n */\nexport function setSegmentCount(count) {\n    this.segmentCount = count;\n    this.circle = count ? false : true;\n\n    this.updateMap();\n    return this;\n}\n","/**\n * Set ray's angle (direction) in radians.\n *\n * @method Raycaster.Ray#setAngle\n * @memberof Raycaster.Ray\n * @instance\n * @since 0.6.0\n *\n * @param {number} [angle = 0] - Ray's angle in radians.\n *\n * @return {Raycaster.Ray} {@link Raycaster.Ray Raycaster.Ray} instance\n */\nexport function setAngle(angle = 0) {\n    this.angle = Phaser.Math.Angle.Normalize(angle);\n    Phaser.Geom.Line.SetToAngle(this._ray, this.origin.x, this.origin.y, this.angle, this.rayRange);\n    return this;\n}\n\n/**\n * Set ray's angle (direction) in degrees.\n *\n * @method Raycaster.Ray#setAngleDeg\n * @memberof Raycaster.Ray\n * @instance\n * @since 0.6.1\n *\n * @param {number} [angle = 0] - Ray's angle in degrees.\n *\n * @return {Raycaster.Ray} {@link Raycaster.Ray Raycaster.Ray} instance\n */\nexport function setAngleDeg(angle = 0) {\n    this.angle = Phaser.Math.Angle.Normalize(Phaser.Math.DegToRad(angle));\n    Phaser.Geom.Line.SetToAngle(this._ray, this.origin.x, this.origin.y, this.angle, this.rayRange);\n    return this;\n}\n","/**\n * Cast ray to find closest intersection with tested mapped objects.\n *\n * @method Raycaster.Ray#cast\n * @memberof Raycaster.Ray\n * @instance\n * @since 0.6.0\n *\n * @param {object} [options] - options that may include:\n * @param {object[]} [options.objects = {Raycaster#mappedObjects}] - Array of game objects to test. If not provided test all mapped game objects.\n * @param {Phaser.Geom.Point|Point} [options.target] - Ray's target point. Used in other casting methods to determine if ray was targeting mapped objects point.\n * @param {boolean} [options.internal = false] - Flag determining if method is used by other casting method.\n *\n * @return {(Phaser.Geom.Point|boolean)} Ray's closest intersection with tested objects. Returns false if no intersection has been found. Additionally contains reference to hit mapped object and segment if available.\n */\nexport function cast(options = {}) {\n    let closestIntersection;\n    let closestSegment;\n    let closestObject;\n    let closestDistance = this.rayRange;\n    let internal = options.internal ? options.internal : false;\n    let startTime = performance.now();\n    let stats = {\n        method: 'cast',\n        rays: 1,\n        testedMappedObjects: 0,\n        hitMappedObjects: 0,\n        segments: 0,\n        time: 0\n    };\n\n    //if bounding box is defined check bounding box intersection\n    if(this._raycaster && this._raycaster.boundingBox) {\n        let intersections = [];\n        Phaser.Geom.Intersects.GetLineToRectangle(this._ray, this._raycaster.boundingBox.rectangle, intersections);\n        if(intersections.length === 1)\n            closestIntersection = intersections[0];\n        else if(intersections.length > 1) {\n            for(let intersection of intersections) {\n                let distance = Phaser.Math.Distance.Between(this.origin.x, this.origin.y, intersection.x, intersection.y);\n                if(distance < closestDistance) {\n                    closestDistance = distance;\n                    closestIntersection = intersection;\n                }\n            }\n        }\n        //if ray target is declared\n        else if(options.target){\n            let distance = Phaser.Math.Distance.Between(this.origin.x, this.origin.y, options.target.x, options.target.y);\n            //if target is within ray range\n            if(this.rayRange > distance) {\n                closestDistance = distance;\n                closestIntersection = options.target;\n            }\n        }\n    }\n\n    //if no objects to cast ray were passed, use raycasters mapped objects\n    if(!options.objects) {\n        if(this._raycaster)\n            options.objects = this._raycaster.mappedObjects;\n        else\n            return intersections;\n    }\n    \n    for(let object of options.objects) {\n        let map, boundingBox;\n        \n        if(object.type === 'body' || object.type === 'composite')\n            map = object.raycasterMap;\n        else\n            map = object.data.get('raycasterMap');\n\n        stats.testedMappedObjects++;\n\n        //get slightly enlarged bounding box due to fridge cases, when ray \"glanced\" border box's corner (v0.10.1)\n        if(internal) {\n            boundingBox = map._boundingBox;\n        }\n        else {\n            boundingBox = map.getBoundingBox();\n            boundingBox.setTo(boundingBox.x - 0.1, boundingBox.y - 0.1, boundingBox.width + 0.2, boundingBox.height + 0.2);\n        }\n\n        //check if object is intersected by ray\n        if(Phaser.Geom.Intersects.GetLineToRectangle(this._ray, boundingBox).length === 0)\n            continue;\n\n        stats.hitMappedObjects++;\n        stats.segments += map.getSegments(this).length;\n        \n        //check intersections\n        for(let segment of map.getSegments(this)) {\n            let intersection = [];\n\n            //if target point is segmemt point\n            if(options.target) {\n                if(\n                    Phaser.Geom.Point.Equals(options.target, segment.getPointA())\n                    || Phaser.Geom.Point.Equals(options.target, segment.getPointB())\n                ) {\n                    intersection = options.target;\n                }\n                else if(!Phaser.Geom.Intersects.LineToLine(this._ray, segment, intersection))\n                    continue;\n            }\n            //if no intersection continue\n            else if(!Phaser.Geom.Intersects.LineToLine(this._ray, segment, intersection))\n              continue;\n            \n            //get closest intersection\n            let distance = Phaser.Math.Distance.Between(this.origin.x, this.origin.y, intersection.x, intersection.y);\n            if(distance < closestDistance) {\n                closestDistance = distance;\n                closestIntersection = intersection;\n                closestObject = map.object;\n                closestSegment = segment;\n            }\n        }\n\n        //check if map is circular\n        if(map.circle) {\n           //if circular map has generated points (besides tangent points to ray)\n            if(map._points.length > 0) {\n                continue;\n            }\n            \n            //check if target point is a circle tangent point to ray\n            if(options.target) {\n                let points = map.getPoints(this);\n                let isTangent = false;\n                for(let point of points) {\n                    if(Phaser.Geom.Point.Equals(options.target, point)) {\n                        //get closest intersection\n                        let distance = Phaser.Math.Distance.Between(this.origin.x, this.origin.y, point.x, point.y);\n\n                        if(distance < closestDistance) {\n                            closestDistance = distance;\n                            closestIntersection = point;\n                            closestObject = map.object;\n                            isTangent = true;\n                            break;\n                        }\n                    }\n                }\n\n                if(isTangent)\n                    continue;\n            }\n\n            let circleIntersections = [];\n            let offset = new Phaser.Geom.Point();\n            offset.x = map.object.x - map.object.displayWidth * (map.object.originX - 0.5);\n            offset.y = map.object.y - map.object.displayHeight * (map.object.originY - 0.5);\n\n            //calculate circle's center after rotation\n            let rotation = map.object.rotation;\n            if(rotation !== 0) {\n                let vector = new Phaser.Geom.Line(map.object.x, map.object.y, offset.x, offset.y);\n                Phaser.Geom.Line.SetToAngle(vector, map.object.x, map.object.y, Phaser.Geom.Line.Angle(vector) + rotation, Phaser.Geom.Line.Length(vector));\n                let cB = vector.getPointB();\n                offset.x = cB.x;\n                offset.y = cB.y;\n            }\n\n            //create transformed circle\n            let circle = new Phaser.Geom.Circle(offset.x, offset.y, map.object.radius * map.object.scaleX);\n\n            if(Phaser.Geom.Intersects.GetLineToCircle(this._ray, circle, circleIntersections)) {\n                for(let intersection of circleIntersections) {\n                    //get closest intersection\n                    let distance = Phaser.Math.Distance.Between(this._ray.x1, this._ray.y1, intersection.x, intersection.y);\n\n                    if(distance < closestDistance) {\n\n                        closestDistance = distance;\n                        closestIntersection = intersection;\n                        closestObject = map.object;\n                    }\n                }\n            }\n        }\n\n        //check container map's circles\n        if(map.type == 'Container' && map._circles.length > 0) {\n            for(let circle of map._circles) {\n                //check if target point is a circle tangent point to ray\n                if(options.target) {\n                    let isTangent = false;\n\n                    for(let point of circle.points) {\n                        if(Phaser.Geom.Point.Equals(options.target, point)) {\n                            //get closest intersection\n                            let distance = Phaser.Math.Distance.Between(this.origin.x, this.origin.y, point.x, point.y);\n\n                            if(distance < closestDistance) {\n                                closestDistance = distance;\n                                closestIntersection = point;\n                                closestObject = map.object;\n                                isTangent = true;\n                                break;\n                            }\n                        }\n                    }\n\n                    if(isTangent)\n                        continue;\n                }\n\n                let circleIntersections = [];\n\n                if(Phaser.Geom.Intersects.GetLineToCircle(this._ray, circle, circleIntersections)) {\n                    for(let intersection of circleIntersections) {\n                        //get closest intersection\n                        let distance = Phaser.Math.Distance.Between(this._ray.x1, this._ray.y1, intersection.x, intersection.y);\n\n                        if(distance < closestDistance) {\n                            closestDistance = distance;\n                            closestIntersection = intersection;\n                            closestObject = map.object;\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    //update stats\n    if(internal) {\n        this._stats.rays++;\n        this._stats.testedMappedObjects += stats.testedMappedObjects;\n        this._stats.hitMappedObjects += stats.hitMappedObjects;\n        this._stats.segments += stats.segments;\n    }\n    else {\n        stats.time = performance.now() - startTime;\n        this._stats = stats;\n    }\n\n    let result;\n    if(!closestIntersection) {\n        if(this.ignoreNotIntersectedRays)\n            return false;\n\n        result = this._ray.getPointB();\n    }\n    else {\n        result = new Phaser.Geom.Point(closestIntersection.x, closestIntersection.y);\n        result.segment = closestSegment;\n        result.object = closestObject;\n    }\n\n    if(this.round) {\n        result.x = Math.round(result.x);\n        result.y = Math.round(result.y);\n    }\n\n    if(!internal)\n        this.drawDebug([result]);\n    \n    return result;\n}","/**\n * Cast ray in all directions to find closest intersections with tested mapped objects.\n *\n * @method Raycaster.Ray#castCircle\n * @memberof Raycaster.Ray\n * @instance\n * @since 0.6.0\n *\n * @param {object} [options] - options that may include:\n * @param {object[]} [options.objects = Raycaster.mappedObjects] - Array of game objects to test. If not provided test all mapped game objects.\n *\n * @return {Phaser.Geom.Point[]} Array of points of ray's closest intersections with tested objects. Additionally each point contains reference to hit mapped object and it's segment if available.\n */\nexport function castCircle(options = {}) {\n    let originalAngle = this.angle;\n    let intersections = [];\n    let maps = [];\n    let rayTargets = [];\n    let testedObjects = [];\n    let startTime = performance.now();\n    //reset stats\n    this._stats = {\n        method: 'castCircle',\n        rays: 0,\n        testedMappedObjects: 0,\n        hitMappedObjects: 0,\n        segments: 0,\n        time: 0\n    };\n\n    //if no objects to cast ray were passed, use raycasters mapped objects\n    if(!options.objects) {\n        if(this._raycaster)\n            options.objects = this._raycaster.mappedObjects;\n        else\n            return intersections;\n    }\n\n    //if bounding box is defined add bounding box points to \n    if(this._raycaster && this._raycaster.boundingBox) {\n        for(let point of this._raycaster.boundingBox.points) {\n            rayTargets.push({\n                point: point,\n                angle: Phaser.Math.Angle.Between(this.origin.x, this.origin.y, point.x, point.y)\n            });\n        }\n    }\n\n    for(let i=0, iLength = options.objects.length; i < iLength; i++) {\n        let object = options.objects[i];\n        //if bound in range\n        if(!this.boundsInRange(object))\n            continue;\n        \n        testedObjects.push(object);\n\n        let map, boundingBox;\n        if(object.type === 'body' || object.type === 'composite')\n            map = object.raycasterMap;\n        else\n            map = object.data.get('raycasterMap');\n\n        //get slightly enlarged bounding box due to fridge cases, when ray \"glanced\" border box's corner (v0.10.1)\n        boundingBox = map.getBoundingBox();\n        boundingBox.setTo(boundingBox.x - 0.1, boundingBox.y - 0.1, boundingBox.width + 0.2, boundingBox.height + 0.2);\n\n        map._boundingBox = boundingBox;\n\n        maps.push(map);\n        //get points and angles\n        for(let point of map.getPoints(this)) {\n            rayTargets.push({\n                point: point,\n                angle: Phaser.Math.Angle.Between(this.origin.x, this.origin.y, point.x, point.y)\n            });\n        }\n\n        //get objects intersections\n        for(let j = i+1, jLength = options.objects.length; j < jLength; j++){\n            let objectB = options.objects[j];\n            let mapB;\n            if(objectB.type === 'body' || objectB.type === 'composite')\n                mapB = objectB.raycasterMap;\n            else {\n                mapB = objectB.data.get('raycasterMap');\n            }\n            //check if bounding boxes overlap\n            if(!Phaser.Geom.Intersects.RectangleToRectangle(map.getBoundingBox(), mapB.getBoundingBox()))\n                continue;\n            \n            //find objects intersections\n            for(let segmentA of map.getSegments(this)) {\n                for(let segmentB of mapB.getSegments(this)) {\n                    let intersection = [];\n                    if(!Phaser.Geom.Intersects.LineToLine(segmentA, segmentB, intersection))\n                        continue;\n                    \n                    rayTargets.push({\n                        point: new Phaser.Geom.Point(intersection.x, intersection.y),\n                        angle: Phaser.Math.Angle.Between(this.origin.x, this.origin.y, intersection.x, intersection.y)\n                    });\n                }\n            }\n        }\n    }\n\n    //sort target points by angle\n    rayTargets.sort(function(a, b){\n        //if rays towards points have the same angles promote closer one\n        if(a.angle == b.angle) {\n            if(Phaser.Math.Distance.Between(this.origin.x, this.origin.y, a.point.x, a.point.y) > Phaser.Math.Distance.Between(this.origin.x, this.origin.y, b.point.x, b.point.y))\n                return 1;\n            else\n                return -1;\n        }\n\n        return a.angle - b.angle;\n    }.bind(this));\n\n    let previousTarget = {\n        angle: false\n    };\n\n    //cast rays\n    for(let target of rayTargets){\n        //if current target is the same as previous one skip loop\n        if(target.angle === previousTarget.angle) {\n            continue;\n        }\n\n        previousTarget = target;\n\n        this.setAngle(target.angle);\n        let intersection = this.cast({\n            objects: testedObjects,\n            target: target.point,\n            internal: true\n        });\n\n        if(intersection){\n            //if intersection hits target point cast two additional rays\n            let castSides = false;\n            if(this.round) {\n                let roundedTarget = new Phaser.Geom.Point(Math.round(target.point.x), Math.round(target.point.y));\n                castSides = Phaser.Geom.Point.Equals(roundedTarget, intersection)\n            }\n            else {\n                castSides = Phaser.Geom.Point.Equals(target.point, intersection);\n            }\n            \n            if(castSides) {\n                this.setAngle(target.angle - 0.0001);\n                let intersectionA = this.cast({\n                    objects: testedObjects,\n                    internal: true\n                });\n\n                if(intersectionA) {\n                    intersections.push(intersectionA);\n                }\n\n                intersections.push(intersection);\n\n                this.setAngle(target.angle + 0.0001);\n                let intersectionB = this.cast({\n                    objects: testedObjects,\n                    internal: true\n                });\n\n                if(intersectionB) {\n                    intersections.push(intersectionB);\n                }\n\n                continue;\n            }\n\n            intersections.push(intersection);\n        }\n    }\n\n    this.setAngle(originalAngle);\n    this.intersections = intersections;\n\n    if(this.autoSlice)\n        this.slicedIntersections = this.slice();\n\n    this._stats.time = performance.now() - startTime;\n\n    this.drawDebug(intersections);\n\n    return intersections;\n}\n","/**\n * Cast ray in a cone to find closest intersections with tested mapped objects.\n *\n * @method Raycaster.Ray#castCone\n * @memberof Raycaster.Ray\n * @instance\n * @since 0.7.0\n *\n * @param {object} [options] - options that may include:\n * @param {object[]} [options.objects = Raycaster.mappedObjects] - Array of game objects to test. If not provided test all mapped game objects.\n *\n * @return {Phaser.Geom.Point[]} Array of points of ray's closest intersections with tested objects. Additionally each point contains reference to hit mapped object and it's segment if available.\n */\nexport function castCone(options = {}) {\n    let originalAngle = this.angle;\n    let intersections = [];\n    let maps = [];\n    let rayTargets = [];\n    let testedObjects = [];\n    let cone = this.cone;\n    let minAngle = 0;\n    let maxAngle = 0;\n    let angleOffset = 0;\n    let startTime = performance.now();\n    //reset stats\n    this._stats = {\n        method: 'castCone',\n        rays: 0,\n        testedMappedObjects: 0,\n        hitMappedObjects: 0,\n        segments: 0,\n        time: 0\n    };\n\n    //set cone\n    if(options.cone !== undefined)\n        cone = options.cone;\n    if(options.coneDeg !== undefined)\n        cone = Phaser.Math.DegToRad(options.coneDeg);\n\n    //set cone min and max angle\n    minAngle = this.angle - cone / 2;\n    maxAngle = this.angle + cone / 2;\n\n    //add min and max angle points\n    this.setAngle(minAngle);\n    rayTargets.push({\n        point: this._ray.getPointB(),\n        angle: minAngle,\n        angleOffsetDeg: Phaser.Math.RadToDeg(-cone / 2)\n    });\n\n    this.setAngle(maxAngle);\n    rayTargets.push({\n        point: this._ray.getPointB(),\n        angle: maxAngle,\n        angleOffsetDeg: Phaser.Math.RadToDeg(cone / 2)\n    });\n\n    //if no objects to cast ray were passed, use raycasters mapped objects\n    if(!options.objects) {\n        if(this._raycaster)\n            options.objects = this._raycaster.mappedObjects;\n        else\n            return intersections;\n    }\n\n    //if bounding box is defined add bounding box points to \n    if(this._raycaster && this._raycaster.boundingBox) {\n        for(let point of this._raycaster.boundingBox.points) {\n\n            let angle = Phaser.Math.Angle.Between(this.origin.x, this.origin.y, point.x, point.y);\n            let angleOffsetDeg = Phaser.Math.Angle.ShortestBetween(Phaser.Math.RadToDeg(angle), Phaser.Math.RadToDeg(originalAngle));\n\n            if(Math.abs(angleOffsetDeg) < Phaser.Math.RadToDeg(cone / 2)) {\n                rayTargets.push({\n                    point: point,\n                    angle: angle,\n                    angleOffsetDeg: -angleOffsetDeg\n                });\n            }\n        }\n    }\n\n    for(let i=0, iLength = options.objects.length; i < iLength; i++) {\n        let object = options.objects[i];\n        //if bound in range\n        if(!this.boundsInRange(object))\n            continue;\n        \n        testedObjects.push(object);\n\n        let map, boundingBox;\n        if(object.type === 'body' || object.type === 'composite')\n            map = object.raycasterMap;\n        else\n            map = object.data.get('raycasterMap');\n\n        //get slightly enlarged bounding box due to fridge cases, when ray \"glanced\" border box's corner (v0.10.1)\n        boundingBox = map.getBoundingBox();\n        boundingBox.setTo(boundingBox.x - 0.1, boundingBox.y - 0.1, boundingBox.width + 0.2, boundingBox.height + 0.2);\n\n        map._boundingBox = boundingBox;\n\n        maps.push(map);\n        //get points and angles\n        for(let point of map.getPoints(this)) {\n\n            let angle = Phaser.Math.Angle.Between(this.origin.x, this.origin.y, point.x, point.y);\n            let angleOffsetDeg = Phaser.Math.Angle.ShortestBetween(Phaser.Math.RadToDeg(angle), Phaser.Math.RadToDeg(originalAngle));\n\n            if(Math.abs(angleOffsetDeg) < Phaser.Math.RadToDeg(cone / 2)) {\n                rayTargets.push({\n                    point: point,\n                    angle: Phaser.Math.Angle.Between(this.origin.x, this.origin.y, point.x, point.y),\n                    angleOffsetDeg: -angleOffsetDeg\n                });\n            }\n        }\n\n        //get objects intersections\n        for(let j = i+1, jLength = options.objects.length; j < jLength; j++){\n            let objectB = options.objects[j];\n            let mapB;\n            if(objectB.type === 'body' || objectB.type === 'composite')\n                mapB = objectB.raycasterMap;\n            else\n                mapB = objectB.data.get('raycasterMap');\n            //check if bounding boxes overlap\n            if(!Phaser.Geom.Intersects.RectangleToRectangle(map.getBoundingBox(), mapB.getBoundingBox()))\n                continue;\n            \n            //find objects intersections\n            for(let segmentA of map.getSegments(this)) {\n                for(let segmentB of mapB.getSegments(this)) {\n                    let intersection = [];\n                    if(!Phaser.Geom.Intersects.LineToLine(segmentA, segmentB, intersection))\n                        continue;\n                    let angle = Phaser.Math.Angle.Between(this.origin.x, this.origin.y, intersection.x, intersection.y);\n                    let angleOffsetDeg = Phaser.Math.Angle.ShortestBetween(Phaser.Math.RadToDeg(angle), Phaser.Math.RadToDeg(originalAngle));\n\n                    if(Math.abs(angleOffsetDeg) < Phaser.Math.RadToDeg(cone / 2)) {\n                        rayTargets.push({\n                            point: new Phaser.Geom.Point(intersection.x, intersection.y),\n                            angle: Phaser.Math.Angle.Between(this.origin.x, this.origin.y, intersection.x, intersection.y),\n                            angleOffsetDeg: -angleOffsetDeg\n                        });\n                    }\n                }\n            }\n        }\n    }\n\n    //sort target points by angle\n    rayTargets.sort(function(a, b){\n        //if rays towards points have the same angles promote closer one\n        if(a.angle == b.angle) {\n            if(Phaser.Math.Distance.Between(this.origin.x, this.origin.y, a.point.x, a.point.y) > Phaser.Math.Distance.Between(this.origin.x, this.origin.y, b.point.x, b.point.y))\n                return 1;\n            else\n                return -1;\n        }\n\n        return a.angleOffsetDeg - b.angleOffsetDeg;\n    }.bind(this));\n\n    let previousTarget = {\n        angle: false\n    };\n\n    //cast rays\n    for(let target of rayTargets){\n        //if current target is the same as previous one skip loop\n        if(target.angle === previousTarget.angle) {\n            continue;\n        }\n\n        previousTarget = target;\n        \n        this.setAngle(target.angle);\n        let intersection = this.cast({\n            objects: testedObjects,\n            target: target.point,\n            internal: true\n        });\n        if(intersection){\n            //if intersection hits target point cast two additional rays\n            let castSides = false;\n            if(this.round) {\n                let roundedTarget = new Phaser.Geom.Point(Math.round(target.point.x), Math.round(target.point.y));\n                castSides = Phaser.Geom.Point.Equals(roundedTarget, intersection)\n            }\n            else {\n                castSides = Phaser.Geom.Point.Equals(target.point, intersection);\n            }\n            if(castSides) {\n                this.setAngle(target.angle - 0.0001);\n                let intersectionA = this.cast({\n                    objects: testedObjects,\n                    internal: true\n                });\n\n                if(intersectionA) {\n                    intersections.push(intersectionA);\n                }\n\n                intersections.push(intersection);\n\n                this.setAngle(target.angle + 0.0001);\n                let intersectionB = this.cast({\n                    objects: testedObjects,\n                    internal: true\n                });\n\n                if(intersectionB) {\n                    intersections.push(intersectionB);\n                }\n\n                continue;\n            }\n\n            intersections.push(intersection);\n        }\n    }\n\n    this.setAngle(originalAngle);\n    this.intersections = intersections;\n    if(this.autoSlice)\n        this.slicedIntersections = this.slice(intersections, false);\n    \n    this._stats.time = performance.now() - startTime;\n\n    this.drawDebug(intersections);\n\n    return intersections;\n}\n","/**\n * Set ray's cone angle (width) in radians.\n *\n * @method Raycaster.Ray#setCone\n * @memberof Raycaster.Ray\n * @instance\n * @since 0.7.0\n *\n * @param {number} [cone = 0] - Ray's cone angle in radians.\n *\n * @return {Raycaster.Ray} {@link Raycaster.Ray Raycaster.Ray} instance\n */\nexport function setCone(cone = 0) {\n    this.cone = cone;\n    return this;\n}\n\n/**\n * Set ray's cone angle (width) in degrees.\n *\n * @method Raycaster.Ray#setConeDeg\n * @memberof Raycaster.Ray\n * @instance\n * @since 0.7.0\n *\n * @param {number} [cone = 0] - Ray's cone angle in degrees.\n *\n * @return {Raycaster.Ray} {@link Raycaster.Ray Raycaster.Ray} instance\n */\nexport function setConeDeg(cone = 0) {\n    this.cone = Phaser.Math.DegToRad(cone);\n    return this;\n}\n","/**\n * Configure ray.\n *\n * @method Raycaster.Ray#config\n * @memberof Raycaster.Ray\n * @instance\n * @since 0.6.0\n *\n * @param {object} [options] - Ray's congfiguration options. May include:\n * @param {Phaser.Geom.Point|Point} [options.origin = {x:0, y:0}] - Ray's position.\n * @param {number} [options.angle = 0] - Ray's angle in radians.\n * @param {number} [options.angleDeg = 0] - Ray's angle in degrees.\n * @param {number} [options.cone = 0] - Ray's cone angle in radians.\n * @param {number} [options.coneDeg = 0] - Ray's cone angle in degrees.\n * @param {number} [options.range = Phaser.Math.MAX_SAFE_INTEGER] - Ray's range.\n * @param {number} [options.collisionRange = Phaser.Math.MAX_SAFE_INTEGER] - Ray's maximum collision range of ray's field of view.\n * @param {number} [options.detectionRange = Phaser.Math.MAX_SAFE_INTEGER] - Maximum distance between ray's position and tested objects bounding boxes.\n * @param {boolean} [options.ignoreNotIntersectedRays = true] - If set true, ray returns false when it didn't hit anything. Otherwise returns ray's target position.\n * @param {boolean} [options.autoSlice = false] - If set true, ray will automatically slice intersections into array of triangles and store it in {@link Raycaster.Ray#slicedIntersections Ray.slicedIntersections}.\n * @param {boolean} [options.round = false] - If set true, point where ray hit will be rounded.\n * @param {(boolean|'arcade'|'matter')} [options.enablePhysics = false] - Add to ray physics body. Body will be a circle with radius equal to {@link Raycaster.Ray#collisionRange Ray.collisionRange}. If set true, arcade physics body will be added.\n *\n * @return {Raycaster.Ray} {@link Raycaster.Ray Raycaster.Ray} instance\n */\nexport function config(options) {\n    this.object = options.object;\n    //origin\n    if(options.origin !== undefined)\n        this.origin.setTo(options.origin.x, options.origin.y);\n\n    //angle\n    if(options.angle !== undefined)\n        this.angle = Phaser.Math.Angle.Normalize(options.angle);\n\n    //angle deg\n    if(options.angleDeg !== undefined)\n        this.angle = Phaser.Math.Angle.Normalize(Phaser.Math.DegToRad(options.angleDeg));\n\n    //cone angle\n    if(options.cone !== undefined)\n        this.cone = options.cone;\n\n    //cone angle deg\n    if(options.coneDeg !== undefined)\n        this.cone = Phaser.Math.DegToRad(options.coneDeg);\n\n    //ray range (0 = max)\n    if(options.rayRange !== undefined)\n        this.rayRange = options.rayRange;\n\n    //collision range (0 = max)\n    if(options.collisionRange !== undefined)\n        this.collisionRange = options.collisionRange;\n\n    //detection range (0 = max)\n    if(options.detectionRange !== undefined)\n        this.detectionRange = options.detectionRange;\n\n    //ignore not intersected rays\n    if(options.ignoreNotIntersectedRays !== undefined)\n        this.ignoreNotIntersectedRays = (options.ignoreNotIntersectedRays == true)\n    \n    //round\n    if(options.round !== undefined)\n        this.round = (options.round == true)\n\n    //auto slice\n    if(options.autoSlice !== undefined)\n        this.autoSlice = (options.autoSlice == true)\n\n    //enable physics\n    if(options.enablePhysics !== undefined && options.enablePhysics)\n        this.enablePhysics(options.enablePhysics);\n    \n    Phaser.Geom.Line.SetToAngle(this._ray, this.origin.x, this.origin.y, this.angle, this.rayRange);\n    this.detectionRangeCircle.setTo(this.origin.x, this.origin.y,this.detectionRange);\n\n    if(this._raycaster.debugOptions.enabled && this._raycaster.scene !== undefined) {\n        this.graphics =  this._raycaster.scene.add.graphics({ lineStyle: { width: 1, color: 0x00ff00}, fillStyle: { color: 0xff00ff } });\n        this.graphics.setDepth(1000);\n    }\n\n    return this;\n}\n","/**\r\n * Draw rays in debug mode\r\n *\r\n * @method Raycaster.Ray#drawDebug\r\n * @memberof Raycaster\r\n * @private\r\n * @since 0.10\r\n * \r\n * @param {Phaser.Geom.Point[]} Array of points of ray's closest intersections with tested objects.\r\n * \r\n * @return {Raycaster.Ray} {@link Raycaster.Ray Raycaster.Ray} instance\r\n */\r\nexport function drawDebug(intersections) {\r\n    if(this.graphics === undefined || !this._raycaster.debugOptions.enabled)\r\n        return this;\r\n\r\n    //clear\r\n    this.graphics.clear();\r\n\r\n    if(!this._raycaster.debugOptions.rays)\r\n        return this;\r\n    \r\n    if(this._raycaster.debugOptions.graphics.ray) {\r\n        this.graphics.lineStyle(1, this._raycaster.debugOptions.graphics.ray);\r\n\r\n        for(let intersection of intersections) {\r\n            this.graphics.strokeLineShape({\r\n                x1: this.origin.x,\r\n                y1: this.origin.y,\r\n                x2: intersection.x,\r\n                y2: intersection.y\r\n            });\r\n        }\r\n    }\r\n\r\n    if(this._raycaster.debugOptions.graphics.rayPoint) {\r\n        this.graphics.fillStyle(this._raycaster.debugOptions.graphics.rayPoint);\r\n\r\n        this.graphics.fillPoint(this.origin.x, this.origin.y, 3);\r\n        \r\n        for(let intersection of intersections) {\r\n            this.graphics.fillPoint(intersection.x, intersection.y, 3);\r\n        }\r\n    }\r\n\r\n    return this;\r\n}","/**\r\n * Destroy object\r\n *\r\n * @method Raycaster.Ray#destroy\r\n * @memberof Raycaster.Ray\r\n * @instance\r\n * @since 0.10.3\r\n */\r\n export function destroy() {\r\n    if(this.graphics)\r\n        this.graphics.destroy();\r\n\r\n    for(let key in this) {\r\n        delete this[key];\r\n    }\r\n }","/**\n * Add to ray physics body. Body will be a circle with radius equal to {@link Raycaster.Ray#collisionRange Ray.collisionRange}. Physics body can be added only once.\n *\n * @method Raycaster.Ray#enablePhysics\n * @memberof Raycaster.Ray\n * @instance\n * @since 0.8.0\n *\n * @param {'arcade'|'matter'} [type = 'arcade'] - Physics type\n * \n * @return {Raycaster.Ray} {@link Raycaster.Ray Raycaster.Ray} instance\n */\nexport function enablePhysics(type = 'arcade') {\n    \n    if(this.body !== undefined)\n        return this;\n\n    this.collisionCircle = this._raycaster.scene.add.circle(this.origin.x, this.origin.y, this.collisionRange);\n    this.collisionCircle._ray = this;\n\n    if(type === 'matter') {\n        this.bodyType = 'matter';\n\n        if(this.collisionRange == Phaser.Math.MAX_SAFE_INTEGER) {\n            let bounds = this._raycaster.boundingBox;\n            this._raycaster.scene.matter.add.gameObject(this.collisionCircle, { shape: { type: 'rectangle', x:bounds.rectangle.centerX, y:bounds.rectangle.centerY, width:bounds.rectangle.width, height:bounds.rectangle.height }, label: 'phaser-raycaster-ray-body', isSensor: true, ignoreGravity:true });\n        }\n        else {\n            this._raycaster.scene.matter.add.gameObject(this.collisionCircle, { shape: { type: 'circle' }, label: 'phaser-raycaster-ray-body', isSensor: true, ignoreGravity:true });\n        }\n\n        this.body = this.collisionCircle.body;\n        this.body._ray = this;\n        this.setOnCollideActive();\n    }\n    else {\n        this.bodyType = 'arcade';\n        this._raycaster.scene.physics.add.existing(this.collisionCircle);\n\n        this.body = this.collisionCircle.body;\n        this.body\n            .setCircle(this.collisionRange)\n            .setAllowGravity(false)\n            .setImmovable(true);\n        this.body._ray = this;\n    }\n\n    return this;\n}\n","/*Matter physics methods for ray body*/\n/**\n * Sets the collision category of this ray's Matter Body. This number must be a power of two between 2^0 (= 1) and 2^31.\n * Two bodies with different collision groups (see {@link #setCollisionGroup}) will only collide if their collision\n * categories are included in their collision masks (see {@link #setCollidesWith}).\n *\n * @method Raycaster.Ray#setCollisionCategory\n * @memberof Raycaster.Ray\n * @instance\n * @since 0.9.1\n *\n * @param {number} value - Unique category bitfield.\n * \n * @return {Raycaster.Ray} {@link Raycaster.Ray Raycaster.Ray} instance\n */\nexport function setCollisionCategory(value) {\n    this.body.collisionFilter.category = value;\n\n    return this;\n};\n\n/**\n * Sets the collision group of this ray's Matter Body. If this is zero or two Matter Bodies have different values,\n * they will collide according to the usual rules (see {@link #setCollisionCategory} and {@link #setCollisionGroup}).\n * If two Matter Bodies have the same positive value, they will always collide; if they have the same negative value,\n * they will never collide.\n *\n * @method Raycaster.Ray#setCollisionCategory\n * @memberof Raycaster.Ray\n * @instance\n * @since 0.9.1\n *\n * @param {number} value - Unique group index.\n * \n * @return {Raycaster.Ray} {@link Raycaster.Ray Raycaster.Ray} instance\n */\nexport function setCollisionGroup(value) {\n    this.body.collisionFilter.group = value;\n\n    return this;\n};\n\n/**\n * Sets the collision mask for this ray's Matter Body. Two Matter Bodies with different collision groups will only\n * collide if each one includes the other's category in its mask based on a bitwise AND, i.e. `(categoryA & maskB) !== 0`\n * and `(categoryB & maskA) !== 0` are both true.*\n *\n * @method Raycaster.Ray#setCollidesWith\n * @memberof Raycaster.Ray\n * @instance\n * @since 0.9.1\n *\n * @param {(number|number[])} categories - A unique category bitfield, or an array of them.\n * \n * @return {Raycaster.Ray} {@link Raycaster.Ray Raycaster.Ray} instance\n */\n\nexport function setCollidesWith(categories) {\n    var flags = 0;\n\n    if (!Array.isArray(categories))\n    {\n        flags = categories;\n    }\n    else\n    {\n        for (var i = 0; i < categories.length; i++)\n        {\n            flags |= categories[i];\n        }\n    }\n\n    this.body.collisionFilter.mask = flags;\n\n    return this;\n};\n\n/**\n * The callback is sent a `Phaser.Types.Physics.Matter.MatterCollisionData` object.\n * \n * This does not change the bodies collision category, group or filter. Those must be set in addition\n * to the callback.\n *\n * @method Raycaster.Ray#setOnCollide\n * @memberof Raycaster.Ray\n * @instance\n * @since 0.9.1\n *\n * @param {function} callback - The callback to invoke when this body starts colliding with another.\n * \n * @return {Raycaster.Ray} {@link Raycaster.Ray Raycaster.Ray} instance\n */\nexport function setOnCollide(callback) {\n    let self = this;\n    this.body.onCollideCallback = function(collisionInfo) {\n        if(collisionInfo.rayCollided) {\n            callback(collisionInfo);\n        }\n        else if(self.processOverlap(collisionInfo)) {\n            collisionInfo.rayCollided = true;\n            callback(collisionInfo);\n        }\n    };\n\n    return this;\n};\n\n/**\n * The callback is sent a `Phaser.Types.Physics.Matter.MatterCollisionData` object.\n * \n * This does not change the bodies collision category, group or filter. Those must be set in addition\n * to the callback.\n *\n * @method Raycaster.Ray#setOnCollideEnd\n * @memberof Raycaster.Ray\n * @instance\n * @since 0.9.1\n *\n * @param {function} callback - The callback to invoke when this body stops colliding with another.\n * \n * @return {Raycaster.Ray} {@link Raycaster.Ray Raycaster.Ray} instance\n */\nexport function setOnCollideEnd(callback) {\n    this.body.onCollideEndCallback = function(collisionInfo) {\n        if(collisionInfo.rayCollided) {\n            collisionInfo.rayCollided = false;\n            callback(collisionInfo);\n        }\n    }\n\n    return this;\n};\n\n/**\n * The callback is sent a `Phaser.Types.Physics.Matter.MatterCollisionData` object.\n * \n * This does not change the bodies collision category, group or filter. Those must be set in addition\n * to the callback.\n *\n * @method Raycaster.Ray#setOnCollideActive\n * @memberof Raycaster.Ray\n * @instance\n * @since 0.9.1\n *\n * @param {function} callback - The callback to invoke for the duration of this body colliding with another.\n * \n * @return {Raycaster.Ray} {@link Raycaster.Ray Raycaster.Ray} instance\n */\nexport function setOnCollideActive(callback) {\n    let self = this;\n    let func = function(collisionInfo) {\n        if(self.processOverlap(collisionInfo)) {\n            let body = collisionInfo.bodyA.label === 'phaser-raycaster-ray-body' ? collisionInfo.bodyB : collisionInfo.bodyA;\n\n            if(collisionInfo.rayCollided !== true) {\n                collisionInfo.rayCollided = true;\n                if(self.body.onCollideCallback) {\n                    self.body.onCollideCallback(collisionInfo);\n                }\n\n                if(self.body.onCollideWith !== undefined && self.body.onCollideWith[body.id]) {\n                    self.body.onCollideWith[body.id](body, collisionInfo);\n                }\n            }\n            if(callback)\n                callback(collisionInfo);\n        }\n        else {\n            if(self.body.onCollideEndCallback && collisionInfo.rayCollided === true) {\n                self.body.onCollideEndCallback(collisionInfo);\n            }\n        }\n    }\n\n    this.body.onCollideActiveCallback = func;\n\n    return this;\n}\n\n/**\n * The callback is sent a reference to the other body, along with a `Phaser.Types.Physics.Matter.MatterCollisionData` object.\n * \n * This does not change the bodies collision category, group or filter. Those must be set in addition\n * to the callback.\n *\n * @method Raycaster.Ray#setOnCollideWith\n * @memberof Raycaster.Ray\n * @instance\n * @since 0.9.1\n *\n * @param {(MatterJS.Body|MatterJS.Body[])} body - The body, or an array of bodies, to test for collisions with.\n * @param {function} callback - The callback to invoke when this body collides with the given body or bodies.\n * \n * @return {Raycaster.Ray} {@link Raycaster.Ray Raycaster.Ray} instance\n */\nexport function setOnCollideWith(body, callback) {\n    let self = this;\n    let func = function(body, collisionInfo) {\n        if(collisionInfo.rayCollided) {\n            callback(body, collisionInfo);\n        }\n        else if(self.processOverlap(collisionInfo)) {\n            collisionInfo.rayCollided = true;\n            callback(body, collisionInfo);\n        }\n    }\n\n    if (!Array.isArray(body))\n    {\n        body = [ body ];\n    }\n\n    for (var i = 0; i < body.length; i++)\n    {\n        var src = (body[i].hasOwnProperty('body')) ? body[i].body : body[i];\n\n        this.body.setOnCollideWith(src, func);\n    }\n\n    return this;\n};\n","/**\n * Set ray's source position.\n *\n * @method Raycaster.Ray#setOrigin\n * @memberof Raycaster.Ray\n * @instance\n * @since 0.6.0\n *\n * @param {number} x - X coordinate.\n * @param {number} y - Y coordinate.\n *\n * @return {Raycaster.Ray} {@link Raycaster.Ray Raycaster.Ray} instance\n */\nexport function setOrigin(x, y) {\n    this.origin.setTo(x, y);\n    Phaser.Geom.Line.SetToAngle(this._ray, this.origin.x, this.origin.y, this.angle, this.rayRange);\n    this.detectionRangeCircle.setTo(this.origin.x, this.origin.y,this.detectionRange);\n\n    if(this.bodyType === 'matter' && this.collisionRange !== Phaser.Math.MAX_SAFE_INTEGER) {\n        this.collisionCircle.x = x;\n        this.collisionCircle.y = y;\n    }\n    else if(this.bodyType === 'arcade') {\n        this.collisionCircle.x = x;\n        this.collisionCircle.y = y;\n    }\n\n    return this;\n}\n","/**\n * Get game objects overlaping field of view.\n *\n * @method Raycaster.Ray#overlap\n * @memberof Raycaster.Ray\n * @instance\n * @since 0.8.0\n *\n * @param {object|object[]} [objects] - Game object / array off game objects to test.\n *\n * @return {object[]} Array of game objects that overlaps with field of view.\n */\nexport function overlap(objects) {\n    let targets = [];\n    let overlapCircle = new Phaser.Geom.Circle(this.origin.x, this.origin.y, this.collisionRange);\n\n    //matter physics\n    if(this.bodyType === 'matter') {\n        let isCollisionInfo = false;\n        if(objects === undefined) {\n            objects = this._raycaster.scene.matter.query.collides(this.body, this._raycaster.scene.matter.getMatterBodies());\n\n            for(let object of objects) {   \n                let body = object.bodyA === this.body ? object.bodyB : object.bodyA;\n\n                if(this.testMatterOverlap(body))\n                    targets.push(body);\n            }\n        }\n        //get object's body\n        else {\n            if(!Array.isArray(objects))\n                objects = [objects];\n            \n            for(let object of objects) {\n                if(object === this.body)\n                    continue;\n    \n                if(this.testMatterOverlap(object))\n                    targets.push(object);\n            }\n        }\n    }\n    //arcade physics\n    else {\n        let bodies = false;\n        //get bodies in range\n        if(objects === undefined) {\n            objects = this._raycaster.scene.physics.overlapCirc(this.origin.x, this.origin.y, this.collisionRange, true, true);\n            bodies = true;\n        }\n        //get object's body\n        else if(!Array.isArray(objects)) {\n            objects = [objects];\n        }\n        //if objects are bodies\n        if(bodies) {\n            for(let body of objects) {\n                if(body === this.body)\n                    continue;\n            \n                let hitbox;\n                //get physics body hitbox\n                if(body.isCircle) {\n                    hitbox = new Phaser.Geom.Circle(body.position.x + body.halfWidth, body.position.y + body.halfWidth, body.halfWidth);\n                }\n                else {\n                    hitbox = new Phaser.Geom.Rectangle(body.x, body.y, body.width, body.height);\n                }\n\n                if(this.testArcadeOverlap(hitbox))\n                    targets.push(body.gameObject);\n            }\n        }\n        //if objects are game objects\n        else {\n            for(let object of objects) {\n                if(object.body === undefined)\n                    continue;\n\n                let hitbox;\n                //get physics body hitbox\n                if(object.body.isCircle) {\n                    hitbox = new Phaser.Geom.Circle(object.body.position.x + object.body.halfWidth, object.body.position.y + object.body.halfWidth, object.body.halfWidth);\n                    if(!Phaser.Geom.Intersects.CircleToCircle(overlapCircle, hitbox))\n                        continue;\n                }\n                else {\n                    hitbox = new Phaser.Geom.Rectangle(object.body.x, object.body.y, object.body.width, object.body.height);\n                    if(!Phaser.Geom.Intersects.CircleToRectangle(overlapCircle, hitbox))\n                        continue;\n                }\n\n                if(this.testArcadeOverlap(hitbox))\n                    targets.push(object);\n            }\n        }\n    }\n\n    return targets;\n}\n\n/**\n * Process callback for physics collider / overlap.\n *\n * @method Raycaster.Ray#processOverlap\n * @memberof Raycaster.Ray\n * @instance\n * @since 0.8.0\n *\n * @param {object} object1 - Game object or matter body passed by collider / overlap or matter CollisionInfo object.\n * @param {object} object2 - Game object or matter body passed by collider / overlap. Ignored if matter CollisionInfo object was passed as first argument.\n *\n * @return {boolean} Return true if game object is overlapping ray's field of view.\n */\nexport function processOverlap(object1, object2) {\n    let obj1, obj2, target;\n    //check if it's matter collisionInfo object\n    if(object1.bodyA !== undefined && object1.bodyB !== undefined) {\n        obj1 = object1.bodyA;\n        obj2 = object1.bodyB;\n    }\n    else {\n        obj1 = object1;\n        obj2 = object2;\n    }\n\n    if(obj1._ray !== undefined && obj1._ray === this)\n        target = obj2;\n    else if(obj2._ray !== undefined && obj2._ray === this)\n        target = obj1;\n    else\n        return false;\n\n    return (this.overlap(target).length > 0);\n}   \n\n/**\n * Test if hitbox overlaps with field of view. Method used in {@link Raycaster.Ray#overlap Ray.overlap}.\n *\n * @method Raycaster.Ray#testArcadeOverlap\n * @memberof Raycaster.Ray\n * @instance\n * @private\n * @since 0.8.0\n *\n * @param {object} hitbox - Game object's hitbox generated inside {@link Raycaster.Ray#overlap Ray.overlap}.\n *\n * @return {boolean} True if hitbox overlaps with {@link Raycaster.Ray Raycaster.Ray} field of view.\n */\nexport function testArcadeOverlap(hitbox) {\n    let overlap = false;\n\n    //iterate through field of view slices to check collisions with target\n    for(let slice of this.slicedIntersections) {\n        //if hitbox is a circle\n        if(hitbox.type == 0) {\n            overlap = Phaser.Geom.Intersects.TriangleToCircle(slice, hitbox);\n        }\n        //if hitbox is a rectangle\n        else {\n            overlap = Phaser.Geom.Intersects.RectangleToTriangle(hitbox, slice);\n        }\n\n        if(overlap) {\n            return true;\n        }\n    }\n\n    return false;\n}\n\n/**\n * Test if matter body overlaps with field of view. Method used in {@link Raycaster.Ray#overlap Ray.overlap}.\n *\n * @method Raycaster.Ray#testMatterOverlap\n * @memberof Raycaster.Ray\n * @instance\n * @private\n * @since 0.9.0\n *\n * @param {object} body - Matter body.\n *\n * @return {boolean} True if body overlaps with {@link Raycaster.Ray Raycaster.Ray} field of view.\n */\nexport function testMatterOverlap(object) {\n    let body;\n\n    if(object.type === 'body')\n        body = object;\n    else if(object.body !== undefined)\n        body = object.body;\n    else\n        return false;\n\n    //if body is concave, ignore convex body\n    let parts = body.parts.length > 1 ? body.parts.splice(1) : body.parts;\n    //iterate through bodies\n    for(let part of parts) {\n        let pointA = part.vertices[0];\n\n        for(let i = 1, length = part.vertices.length; i < length; i++) {\n            let pointB = part.vertices[i];\n            let segment = new Phaser.Geom.Line(pointA.x, pointA.y, pointB.x, pointB.y);\n\n            //iterate through field of view slices to check collisions with target\n            for(let slice of this.slicedIntersections) {\n                let overlap = Phaser.Geom.Intersects.TriangleToLine(slice, segment);\n                //additional checking if slice contain segment's points due to TriangleToLine bug.\n                if(!overlap)\n                    overlap = Phaser.Geom.Triangle.ContainsPoint(slice, segment.getPointA());\n                if(!overlap)\n                    overlap = Phaser.Geom.Triangle.ContainsPoint(slice, segment.getPointB());\n\n                if(overlap) {\n                    return true;\n                }\n            }\n            pointA = pointB;\n        }\n\n        //closing segment\n        let segment = new Phaser.Geom.Line(part.vertices[part.vertices.length - 1].x, part.vertices[part.vertices.length - 1].y, part.vertices[0].x, part.vertices[0].y);\n         //iterate through field of view slices to check collisions with target\n        for(let slice of this.slicedIntersections) {\n            let overlap = Phaser.Geom.Intersects.TriangleToLine(slice, segment);\n\n            if(overlap) {\n                return true;\n            }\n        }\n    }\n\n    return false;\n}\n","/**\n * Set ray's range.\n *\n * @method Raycaster.Ray#setRayRange\n * @memberof Raycaster.Ray\n * @instance\n * @since 0.6.0\n *\n * @param {number} [rayRange = Phaser.Math.MAX_SAFE_INTEGER] - Ray's range.\n *\n * @return {Raycaster.Ray} {@link Raycaster.Ray Raycaster.Ray} instance\n */\nexport function setRayRange(rayRange = Phaser.Math.MAX_SAFE_INTEGER) {\n    this.rayRange = rayRange;\n    Phaser.Geom.Line.SetToAngle(this._ray, this.origin.x, this.origin.y, this.angle, this.rayRange);\n    return this;\n}\n\n/**\n * Set ray's maximum detection range. Objects outside detection range won't be tested.\n * Ray tests all objects when set to 0.\n *\n * @method Raycaster.Ray#setDetectionRange\n * @memberof Raycaster.Ray\n * @instance\n * @since 0.6.0\n *\n * @param {number} [detectionRange = 0] - Maximum distance between ray's position and tested objects bounding boxes.\n *\n * @return {Raycaster.Ray} {@link Raycaster.Ray Raycaster.Ray} instance\n */\nexport function setDetectionRange(detectionRange = 0) {\n    this.detectionRange = detectionRange;\n    this.detectionRangeCircle.setTo(this.origin.x, this.origin.y,this.detectionRange);\n\n    return this;\n}\n\n/**\n * Set ray's field of view maximum collision range. Objects outside collision range won't be tested by {@link Raycaster.Ray#overlap Raycaster.Ray.overlap} method.\n * Determines ray's physics body radius.\n *\n * @method Raycaster.Ray#setCollisionRange\n * @memberof Raycaster.Ray\n * @instance\n * @since 0.8.0\n *\n * @param {number} [collisionRange = Phaser.Math.MAX_SAFE_INTEGER] - Ray's collision range and physics body radius.\n *\n * @return {Raycaster.Ray} {@link Raycaster.Ray Raycaster.Ray} instance\n */\nexport function setCollisionRange(collisionRange = Phaser.Math.MAX_SAFE_INTEGER) {\n    let oldRangeMax = this.collisionRange == Phaser.Math.MAX_SAFE_INTEGER;\n    this.collisionRange = collisionRange;\n    this.collisionCircle.setRadius(this.collisionRange);\n\n    if(this.bodyType === 'matter') {\n        if(this.collisionRange == Phaser.Math.MAX_SAFE_INTEGER) {\n            let bounds = this._raycaster.boundingBox;\n\n            this._raycaster.scene.matter.body.set(this.body, {\n                shape: {\n                    type: 'rectangle',\n                    x: bounds.rectangle.centerX,\n                    y: bounds.rectangle.centerY,\n                    width: bounds.rectangle.width,\n                    height: bounds.rectangle.height,\n                    circleRadius:0\n                }\n            });\n        }\n        else if(oldRangeMax) {\n            this._raycaster.scene.matter.body.set(this.body, {\n                shape: {\n                    type: 'circle',\n                    x: this.collisionCircle.x,\n                    y: this.collisionCircle.y\n                },\n                circleRadius: this.collisionRange,\n                isStatic: false\n            });\n        }\n        else {\n            this.collisionCircle.setRadius(this.collisionRange);\n        }\n        this._raycaster.scene.matter.body.set(this.body, 'circleRadius', this.collisionRange)\n    }\n    else if(this.bodyType === 'arcade') {\n        this.body.setCircle(this.collisionRange);\n    }\n\n    return this;\n}\n\n/**\n * Test if object's bounding box is in ray's detection range.\n *\n * @method Raycaster.Ray#boundsInRange\n * @memberof Raycaster.Ray\n * @instance\n * @since 0.6.0\n *\n * @param {object} object - Tested object\n * @param {(Phaser.Geom.Rectangle|boolean)} [bounds = false] - Tested object's bounds. If not passed bounds will be generated automatically.\n *\n * @return {boolean} Information if object is in ray's detection range.\n */\nexport function boundsInRange(object, bounds = false) {\n    if(!this.detectionRange)\n        return true;\n\n    let objectBounds;\n    if(bounds)\n        objectBounds = bounds;\n    else {\n        if(object.type === 'body' || object.type === 'composite')\n            objectBounds = object.raycasterMap.getBoundingBox();\n        else\n            objectBounds = object.data.get('raycasterMap').getBoundingBox();\n    }\n\n    if(Phaser.Geom.Intersects.CircleToRectangle(this.detectionRangeCircle, objectBounds))\n        return true;\n\n    return false;\n}\n","/**\n * @classdesc\n *\n * Ray class responsible for casting ray's and testing their collisions with mapped objects.\n *\n * @namespace Raycaster.Ray\n * @class Raycaster.Ray\n * @constructor\n * @since 6.0.0\n *\n * @param {object} [options] - Ray's congfiguration options. May include:\n * @param {Phaser.Geom.Point|Point} [options.origin = {x:0, y:0}] - Ray's position.\n * @param {number} [options.angle = 0] - Ray's angle in radians.\n * @param {number} [options.angleDeg = 0] - Ray's angle in degrees.\n * @param {number} [options.cone = 0] - Ray's cone angle in radians.\n * @param {number} [options.coneDeg = 0] - Ray's cone angle in degrees.\n * @param {number} [options.range = Phaser.Math.MAX_SAFE_INTEGER] - Ray's range.\n * @param {number} [options.collisionRange = Phaser.Math.MAX_SAFE_INTEGER] - Ray's maximum collision range of ray's field of view.\n * @param {number} [options.detectionRange = Phaser.Math.MAX_SAFE_INTEGER] - Maximum distance between ray's position and tested objects bounding boxes.\n * @param {boolean} [options.ignoreNotIntersectedRays = true] - If set true, ray returns false when it didn't hit anything. Otherwise returns ray's target position.\n * @param {boolean} [options.autoSlice = false] - If set true, ray will automatically slice intersections into array of triangles and store it in {@link Raycaster.Ray#slicedIntersections Ray.slicedIntersections}.\n * @param {boolean} [options.round = false] - If set true, point where ray hit will be rounded.\n * @param {(boolean|'arcade'|'matter')} [options.enablePhysics = false] - Add to ray physics body. Body will be a circle with radius equal to {@link Raycaster.Ray#collisionRange Ray.collisionRange}. If set true, arcade physics body will be added.\n * @param {Raycaster} [raycaster] - Parent raycaster object.\n */\nexport function Ray(options, raycaster) {\n    /**\n    * Reference to parent Raycaster object.\n    *\n    * @name Raycaster.Ray#_raycaster\n    * @type {Raycaster}\n    * @private\n    * @since 0.6.0\n    */\n    this._raycaster = raycaster ? raycaster : false;\n    /**\n    * Ray's source position.\n    *\n    * @name Raycaster.Ray#origin\n    * @type {Phaser.Geom.Point}\n    * @since 0.6.0\n    */\n    this.origin = new Phaser.Geom.Point();\n    /**\n    * Ray's representation used to calculating intersections.\n    *\n    * @name Raycaster.Ray#_ray\n    * @type {Phaser.Geom.Line}\n    * @private\n    * @since 0.6.0\n    */\n    this._ray = new Phaser.Geom.Line();\n    /**\n    * Ray's angle in radians.\n    *\n    * @name Raycaster.Ray#angle\n    * @type {number}\n    * @default 0\n    * @since 0.6.0\n    */\n    this.angle = 0;\n    /**\n    * Ray's cone width angle in radians.\n    *\n    * @name Raycaster.Ray#cone\n    * @type {number}\n    * @default 0\n    * @since 0.7.0\n    */\n    this.cone = 0;\n    /**\n    * Ray's maximum range\n    *\n    * @name Raycaster.Ray#rayRange\n    * @type {number}\n    * @default Phaser.Math.MAX_SAFE_INTEGER\n    * @since 0.6.0\n    */\n    this.rayRange = Phaser.Math.MAX_SAFE_INTEGER;\n    /**\n    * Ray's maximum detection range. Objects outside detection range won't be tested.\n    * Ray tests all objects when set to 0.\n    *\n    * @name Raycaster.Ray#detectionRange\n    * @type {number}\n    * @default\n    * @since 0.6.0\n    */\n    this.detectionRange = 0;\n    /**\n    * Ray's representation of detection range used in calculating if objects are in range.\n    *\n    * @name Raycaster.Ray#detectionRangeCircle\n    * @type {Phaser.Geom.Circle}\n    * @private\n    * @since 0.6.0\n    */\n    this.detectionRangeCircle = new Phaser.Geom.Circle();\n    /**\n    * Ray's maximum collision range of ray's field of view. Radius of {@link Raycaster.Ray#collisionRangeCircle Ray.body}.\n    *\n    * @name Raycaster.Ray#collisionRange\n    * @type {number}\n    * @default Phaser.Math.MAX_SAFE_INTEGER\n    * @since 0.8.0\n    */\n    this.collisionRange = Phaser.Math.MAX_SAFE_INTEGER;\n    /**\n    * If set true, ray returns false when it didn't hit anything. Otherwise returns ray's target position.\n    *\n    * @name Raycaster.Ray#ignoreNotIntersectedRays\n    * @type {boolean}\n    * @default true\n    * @since 0.6.0\n    */\n    this.ignoreNotIntersectedRays = true;\n    /**\n    * If set true, ray's hit points will be rounded.\n    *\n    * @name Raycaster.Ray#round\n    * @type {boolean}\n    * @default false\n    * @since 0.8.1\n    */\n    this.round = false;\n    /**\n    * If set true, ray will automatically slice intersections into array of triangles and store it in {@link Raycaster.Ray#slicedIntersections Ray.slicedIntersections}.\n    *\n    * @name Raycaster.Ray#autoSlice\n    * @type {boolean}\n    * @default false\n    * @since 0.8.0\n    */\n    this.autoSlice = false;\n    /**\n    * Array of intersections from last raycast representing field of view.\n    *\n    * @name Raycaster.Ray#intersections\n    * @type {object[]}\n    * @default []\n    * @since 0.8.0\n    */\n    this.intersections = [];\n    /**\n    * Array of triangles representing slices of field of view from last raycast.\n    *\n    * @name Raycaster.Ray#slicedIntersections\n    * @type {Phaser.Geom.Triangle[]}\n    * @default []\n    * @since 0.8.0\n    */\n    this.slicedIntersections = [];\n\n    /**\n    * Physics body for testing field of view collisions.\n    *\n    * @name Raycaster.Ray#body\n    * @type {object}\n    * @default undefined\n    * @since 0.8.0\n    */\n    //this.body = false;\n    /**\n    * Physics body type.\n    *\n    * @name Raycaster.Ray#bodyType\n    * @type {(boolean|'arcade'|'matter')}\n    * @default false\n    * @since 0.9.0\n    */\n    this.bodyType = false;\n\n    /**\n    * Ray casting stats.\n    *\n    * @name Raycaster.Ray#_stats\n    * @type {object}\n    * @private\n    * @since 0.10.0\n    * \n    * @property {string} method Used casting method (cast, castCircle, castCone).\n    * @property {number} rays Casted rays.\n    * @property {number} testedMappedObjects Tested mapped objects.\n    * @property {number} hitMappedObjects Hit mapped objects.\n    * @property {number} segments Tested segments.\n    * @property {number} time Casting time.\n    */\n    this._stats = {\n        method: 'cast',\n        rays: 0,\n        testedMappedObjects: 0,\n        hitMappedObjects: 0,\n        segments: 0,\n        time: 0\n    };\n\n    /**\n    * Ray's graphics object used for debug\n    *\n    * @name Raycaster.Ray#graphics\n    * @type {Phaser.GameObjects.Graphics}\n    * @private\n    * @since 0.10.0\n    */\n     this.graphics;\n\n    this.config(options);\n};\n\nRay.prototype = {\n    config: require('./config.js').config,\n    getStats: require('./stats.js').getStats,\n    setRay: require('./ray.js').setRay,    \n    setOrigin: require('./origin.js').setOrigin,\n    setRayRange: require('./range.js').setRayRange,\n    setAngle: require('./angle.js').setAngle,\n    setAngleDeg: require('./angle.js').setAngleDeg,\n    setCone: require('./cone.js').setCone,\n    setConeDeg: require('./cone.js').setConeDeg,\n    setDetectionRange: require('./range.js').setDetectionRange,\n    boundsInRange: require('./range.js').boundsInRange,\n    cast: require('./cast.js').cast,\n    castCircle: require('./castCircle.js').castCircle,\n    castCone: require('./castCone.js').castCone,\n    slice: require('./slice.js').slice,\n    setCollisionRange: require('./range.js').setCollisionRange,\n    enablePhysics: require('./enablePhysics.js').enablePhysics,\n    overlap: require('./overlap.js').overlap,\n    processOverlap: require('./overlap.js').processOverlap,\n    testArcadeOverlap: require('./overlap.js').testArcadeOverlap,\n    testMatterOverlap: require('./overlap.js').testMatterOverlap,\n    setCollisionCategory: require('./matter-physics-methods.js').setCollisionCategory,\n    setCollisionGroup: require('./matter-physics-methods.js').setCollisionGroup,\n    setCollidesWith: require('./matter-physics-methods.js').setCollidesWith,\n    setOnCollide: require('./matter-physics-methods.js').setOnCollide,\n    setOnCollideEnd: require('./matter-physics-methods.js').setOnCollideEnd,\n    setOnCollideActive: require('./matter-physics-methods.js').setOnCollideActive,\n    setOnCollideWith: require('./matter-physics-methods.js').setOnCollideWith,\n    drawDebug: require('./debug.js').drawDebug,\n    destroy: require('./destroy.js').destroy,\n};\n","/**\n * Set ray's position, direction (angle) and range.\n *\n * @method Raycaster.Ray#setRay\n * @memberof Raycaster.Ray\n * @instance\n * @since 0.6.0\n *\n * @param {number} x - X coordinate.\n * @param {number} y - Y coordinate.\n * @param {number} [angle] - Ray's angle in radians.\n * @param {number} [range = Phaser.Math.MAX_SAFE_INTEGER] - Ray's range.\n *\n * @return {Raycaster.Ray} {@link Raycaster.Ray Raycaster.Ray} instance\n */\nexport function setRay(x, y, angle, rayRange = Phaser.Math.MAX_SAFE_INTEGER) {\n    this.origin.setTo(x, y);\n    this.angle = Phaser.Math.Angle.Normalize(angle);\n    this.rayRange = rayRange;\n\n    Phaser.Geom.Line.SetToAngle(this._ray, this.origin.x, this.origin.y, this.angle, this.rayRange);\n    this.detectionRangeCircle.setTo(this.origin.x, this.origin.y, this.detectionRange);\n    return this;\n}\n","/**\n * Slice ray's field of view represented by polygon or array of points into array of triangles.\n *\n * @method Raycaster.Ray#slice\n * @memberof Raycaster.Ray\n * @instance\n * @since 0.8.0\n *\n * @param {(object[]|Phaser.Geom.Polygon)} [fov = {Ray#fov}] - Array of points or polygon representing field of view. If not passed, filed of view from last raycaste will be used.\n * @param {boolean} [closed = true|{Ray#fov}] - Define if field of view polygon is closed (first and last vertices sholud be connected). If fov was not passed, value depends of last type of casting.\n *\n * @return {Phaser.Geom.Triangle[]} Array of triangles representing slices of field of view.\n */\nexport function slice(intersections = this.intersections, closed = true) {\n    //if intersections is Phaser.Geom.Polygon object\n    if(!Array.isArray(intersections)) {\n        if(intersections.type === 4)\n            intersections = intersections.points;\n        else\n            return [];\n    }\n\n    if(intersections.length === 0)\n        return [];\n\n    let slices = [];\n    for(let i = 0, iLength = intersections.length - 1; i < iLength; i++) {\n        slices.push(new Phaser.Geom.Triangle(this.origin.x, this.origin.y, intersections[i].x, intersections[i].y, intersections[i+1].x, intersections[i+1].y));\n    }\n\n    if(closed)\n        slices.push(new Phaser.Geom.Triangle(this.origin.x, this.origin.y, intersections[0].x, intersections[0].y, intersections[intersections.length-1].x, intersections[intersections.length-1].y));\n\n    return slices;\n}\n","/**\r\n * Get ray statistics for last casting. Stats include\r\n * * number of casted rays,\r\n * * number of tested mapped objects,\r\n * * number of tested map segments.\r\n * * casting time\r\n *\r\n * @method Raycaster.Ray#getStats\r\n * @memberof Raycaster.Ray\r\n * @instance\r\n * @since 0.10.0\r\n *\r\n * @return {object} Statisticss from last casting.\r\n */\r\n export function getStats() {\r\n     return this._stats;\r\n }\r\n","/**\r\n* @author       Marcin Walczak <contact@marcin-walczak.pl>\r\n* @copyright    2023 Marcin Walczak\r\n* @license      {@link https://github.com/wiserim/phaser-raycaster/blob/master/LICENSE|MIT License}\r\n*/\r\n\r\n/**\r\n * @classdesc\r\n *\r\n * Raycaster class responsible for creating ray objects and managing mapped objects.\r\n * \r\n * @namespace Raycaster\r\n * @class Raycaster\r\n * @constructor\r\n * @since 6.0.0\r\n *\r\n * @param {object} [options] - Raycaster's configuration options. May include:\r\n * @param {Phaser.Scene} [options.scene] - Scene in which Raycaster will be used.\r\n * @param {number} [options.mapSegmentCount = 0] - Number of segments of circle maps. If set to 0, map will be teste\r\n * @param {(object|object[])} [options.objects] - Game object or array of game objects to map.\r\n * @param {Phaser.Geom.Rectangle} [options.boundingBox] - Raycaster's bounding box. If not passed, {@link Raycaster Raycaster} will set it's bounding box based on Arcade Physics / Matter physics world bounds.\r\n * @param {boolean} [options.autoUpdate = true] - If set true, automatically update dynamic maps on scene update event.\r\n * @param {boolean|object} [options.debug] - Enable debug mode or configure it {@link Raycaster#debugOptions debugOptions}.\r\n */\r\nexport function Raycaster(options) {\r\n    /**\r\n    * Plugin version.\r\n    *\r\n    * @name Raycaster#version\r\n    * @type {string}\r\n    * @readonly\r\n    * @since 0.6.0\r\n    */\r\n    this.version = '0.10.6';\r\n    /**\r\n    * Raycaster's scene\r\n    *\r\n    * @name Raycaster#scene\r\n    * @type {Phaser.Scene}\r\n    * @private\r\n    * @since 0.6.0\r\n    */\r\n    this.scene;\r\n    /**\r\n    * Raycaster's graphics object used for debug\r\n    *\r\n    * @name Raycaster#graphics\r\n    * @type {Phaser.GameObjects.Graphics}\r\n    * @private\r\n    * @since 0.10.0\r\n    */\r\n    this.graphics;\r\n    /**\r\n    * Raycaster's debug config\r\n    *\r\n    * @name Raycaster#debugOptions\r\n    * @type {Object}\r\n    * @since 0.10.0\r\n    * \r\n    * @property {boolean} [enable = false] Enable debug mode\r\n    * @property {boolean} [maps = true] - Enable maps debug\r\n    * @param {boolean} [rays = true] - Enable rays debug\r\n    * @property {boolean} graphics - Debug graphics options\r\n    * @property {boolean|number} [graphics.ray = 0x00ff00] - Debug ray color. Set false to disable.\r\n    * @property {boolean|number} [graphics.rayPoint = 0xff00ff] - Debug ray point color. Set false to disable.\r\n    * @property {boolean|number} [graphics.mapPoint = 0x00ffff] - debug map point color. Set false to disable.\r\n    * @property {boolean|number} [graphics.mapSegment = 0x0000ff] - Debug map segment color. Set false to disable.\r\n    * @property {boolean|number} [graphics.mapBoundingBox = 0xff0000] - Debug map bounding box color. Set false to disable.\r\n    */\r\n    this.debugOptions = {\r\n        enabled: false,\r\n        maps: true,\r\n        rays: true,\r\n        graphics: {\r\n            ray: 0x00ff00,\r\n            rayPoint: 0xff00ff,\r\n            mapPoint: 0x00ffff,\r\n            mapSegment: 0x0000ff,\r\n            mapBoundingBox: 0xff0000\r\n        }\r\n    };\r\n\r\n    /**\r\n    * Raycaster statistics.\r\n    *\r\n    * @name Raycaster.Raycaster#_stats\r\n    * @type {object}\r\n    * @private\r\n    * @since 0.10.0\r\n    * \r\n    * @property {object} mappedObjects Mapped objects statistics.\r\n    * @property {number} mappedObjects.total Mapped objects total.\r\n    * @property {number} mappedObjects.static Static maps.\r\n    * @property {number} mappedObjects.dynamic Dynamic maps.\r\n    * @property {number} mappedObjects.rectangleMaps Rectangle maps.\r\n    * @property {number} mappedObjects.polygonMaps Polygon maps.\r\n    * @property {number} mappedObjects.circleMaps Circle maps.\r\n    * @property {number} mappedObjects.lineMaps Line maps.\r\n    * @property {number} mappedObjects.containerMaps Container maps.\r\n    * @property {number} mappedObjects.tilemapMaps Tilemap maps.\r\n    * @property {number} mappedObjects.matterMaps Matter body maps.\r\n    */\r\n     this._stats = {\r\n        mappedObjects: {\r\n            total: 0,\r\n            static: 0,\r\n            dynamic: 0,\r\n            rectangleMaps: 0,\r\n            polygonMaps: 0,\r\n            circleMaps: 0,\r\n            lineMaps: 0,\r\n            containerMaps: 0,\r\n            tilemapMaps: 0,\r\n            matterMaps: 0\r\n        }\r\n     };\r\n\r\n    /**\r\n    * Raycaster's bounding box. By default it's size is based on Arcade Physics / Matter physics world bounds.\r\n    * If world size will change after creation of Raycaster, bounding box needs to be updated.\r\n    *\r\n    * @name Raycaster#boundingBox\r\n    * @type {Phaser.Geom.Rectangle}\r\n    * @default false\r\n    * @private\r\n    * @since 0.6.0\r\n    */\r\n    this.boundingBox = false;\r\n    /**\r\n    * Array of mapped game objects.\r\n    *\r\n    * @name Raycaster#mappedObjects\r\n    * @type {object[]}\r\n    * @since 0.6.0\r\n    */\r\n    this.mappedObjects = [];\r\n    /**\r\n    * Array of dynamic mapped game objects.\r\n    *\r\n    * @name Raycaster#dynamicMappedObjects\r\n    * @type {object[]}\r\n    * @since 0.10.6\r\n    */\r\n     this.dynamicMappedObjects = [];\r\n    /**\r\n    * Number of segments of circle maps.\r\n    *\r\n    * @name Raycaster#mapSegmentCount\r\n    * @type {number}\r\n    * @default 0\r\n    * @since 0.6.0\r\n    */\r\n    this.mapSegmentCount = 0;\r\n\r\n    if(options !== undefined) {\r\n        if(options.boundingBox === undefined && options.scene !== undefined) {\r\n            if(options.scene.physics !== undefined)\r\n                options.boundingBox = options.scene.physics.world.bounds;\r\n            else if(options.scene.matter !== undefined) {\r\n                let walls = options.scene.matter.world.walls;\r\n\r\n                if(walls.top !== null) {\r\n                    options.boundingBox = new Phaser.Geom.Rectangle(\r\n                        walls.top.vertices[3].x,\r\n                        walls.top.vertices[3].y,\r\n                        walls.bottom.vertices[1].x - walls.top.vertices[3].x,\r\n                        walls.bottom.vertices[1].y - walls.top.vertices[3].y\r\n                    );\r\n                }\r\n            }\r\n        }\r\n\r\n        this.setOptions(options);\r\n\r\n        if(options.autoUpdate === undefined || options.autoUpdate)\r\n            //automatically update event\r\n            this.scene.events.on('update', this.update, this);\r\n    }\r\n    else\r\n        //automatically update event\r\n        this.scene.events.on('update', this.update, this);\r\n\r\n    return this;\r\n}\r\n\r\nRaycaster.prototype = {\r\n    /**\r\n    * Configure raycaster.\r\n    *\r\n    * @method Raycaster#setOptions\r\n    * @memberof Raycaster\r\n    * @instance\r\n    * @since 0.6.0\r\n    *\r\n    * @param {object} [options] - Raycaster's congfiguration options. May include:\r\n    * @param {Phaser.Scene} [options.scene] - Scene in which Raycaster will be used.\r\n    * @param {number} [options.mapSegmentCount = 0] - Number of segments of circle maps.\r\n    * @param {(object|object[])} [options.objects] - Game object or array of game objects to map.\r\n    * @param {Phaser.Geom.Rectangle} [options.boundingBox] - Raycaster's bounding box.\r\n    * @param {boolean|object} [options.debug] - Enable debug mode or cofigure {@link Raycaster#debugOptions debugOptions}.\r\n    *\r\n    * @return {Raycaster} {@link Raycaster Raycaster} instance\r\n    */\r\n    setOptions: function(options) {\r\n        if(options.scene !== undefined) {\r\n            this.scene = options.scene;\r\n            this.graphics =  this.scene.add.graphics({ lineStyle: { width: 1, color: 0x00ff00}, fillStyle: { color: 0xff00ff } });\r\n            this.graphics.setDepth(999);\r\n        }\r\n\r\n        if(options.debug !== undefined && options.debug !== false) {\r\n            this.debugOptions.enabled = true;\r\n\r\n            if(typeof options.debug === 'object')\r\n                Object.assign(this.debugOptions, options.debug);\r\n        }\r\n\r\n        if(options.mapSegmentCount !== undefined)\r\n            this.mapSegmentCount = options.mapSegmentCount;\r\n\r\n        if(options.objects !== undefined)\r\n            this.mapGameObjects(options.objects);\r\n\r\n        if(options.boundingBox !== undefined)\r\n            this.setBoundingBox(options.boundingBox.x, options.boundingBox.y, options.boundingBox.width, options.boundingBox.height)\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n    * Set Raycaster's bounding box.\r\n    *\r\n    * @method Raycaster#setBoundingBox\r\n    * @memberof Raycaster\r\n    * @instance\r\n    * @since 0.6.0\r\n    *\r\n    * @param {number} x - The X coordinate of the top left corner of bounding box.\r\n    * @param {number} y - The Y coordinate of the top left corner of bounding box.\r\n    * @param {number} width - The width of bounding box.\r\n    * @param {number} height - The height of bounding box.\r\n    *\r\n    * @return {Raycaster} {@link Raycaster Raycaster} instance\r\n    */\r\n    setBoundingBox: function(x, y, width, height) {\r\n        this.boundingBox = {\r\n            rectangle: new Phaser.Geom.Rectangle(x, y, width, height),\r\n            points: [],\r\n            segments: []\r\n        }\r\n        //set points\r\n        let points = [\r\n            new Phaser.Geom.Point(this.boundingBox.rectangle.left, this.boundingBox.rectangle.top),\r\n            new Phaser.Geom.Point(this.boundingBox.rectangle.right, this.boundingBox.rectangle.top),\r\n            new Phaser.Geom.Point(this.boundingBox.rectangle.right, this.boundingBox.rectangle.bottom),\r\n            new Phaser.Geom.Point(this.boundingBox.rectangle.left, this.boundingBox.rectangle.bottom)\r\n        ];\r\n\r\n        this.boundingBox.points = points;\r\n\r\n        //set segments\r\n        for(let i = 0, length = this.boundingBox.points.length; i < length; i++) {\r\n            if(i+1 < length)\r\n            this.boundingBox.segments.push(new Phaser.Geom.Line(points[i].x, points[i].y, points[i+1].x, points[i+1].y));\r\n            else\r\n            this.boundingBox.segments.push(new Phaser.Geom.Line(points[i].x, points[i].y, points[0].x, points[0].y));\r\n        }\r\n    },\r\n\r\n    /**\r\n    * Map game objects\r\n    *\r\n    * @method Raycaster#mapGameObjects\r\n    * @memberof Raycaster\r\n    * @instance\r\n    * @since 0.6.0\r\n    *\r\n    * @param {object|object[]} objects - Game object / matter body or array of game objects / matter bodies to map.\r\n    * @param {boolean} [dynamic = false] - {@link Raycaster.Map Raycaster.Map} dynamic flag (determines map will be updated automatically).\r\n    * @param {object} [options] - Additional options for {@link Raycaster.Map Raycaster.Map}\r\n    *\r\n    * @return {Raycaster} {@link Raycaster Raycaster} instance\r\n    */\r\n    mapGameObjects: function(objects, dynamic = false, options = {}) {\r\n        options.dynamic = dynamic;\r\n        options.segmentCount = (options.segmentCount !== undefined) ? options.segmentCount : this.segmentCount;\r\n\r\n        if(!Array.isArray(objects))\r\n            objects = [objects];\r\n        \r\n        for(let object of objects) {\r\n            if(this.mappedObjects.includes(object))\r\n                continue;\r\n\r\n            //if object is not supported\r\n            if(object.data && object.data.get('raycasterMapNotSupported'))\r\n                continue;\r\n\r\n            let config = {};\r\n            for(let option in options) {\r\n                config[option] = options[option];\r\n            }\r\n            config.object = object;\r\n            \r\n            let map = new this.Map(config, this);\r\n            \r\n            if(map.notSupported) {\r\n                map.destroy();\r\n                continue;\r\n            }\r\n\r\n            if(object.type === 'body' || object.type === 'composite') {\r\n                object.raycasterMap = map;\r\n            }\r\n            else if(!object.data) {\r\n                object.setDataEnabled();\r\n                object.data.set('raycasterMap', map);\r\n            }\r\n            else {\r\n                object.data.set('raycasterMap', map);\r\n            }\r\n\r\n            this.mappedObjects.push(object);\r\n\r\n            //update stats            \r\n            switch(object.type) {\r\n                case 'Polygon':\r\n                    this._stats.mappedObjects.polygonMaps++;\r\n                    break;\r\n                case 'Arc':\r\n                    this._stats.mappedObjects.circleMaps++;\r\n                    break;\r\n                case 'Line':\r\n                    this._stats.mappedObjects.lineMaps++;\r\n                    break;\r\n                case 'Container':\r\n                    this._stats.mappedObjects.containerMaps++;\r\n                    break;\r\n                case 'StaticTilemapLayer':\r\n                    this._stats.mappedObjects.tilemapMaps++;\r\n                    break;\r\n                case 'DynamicTilemapLayer':\r\n                    this._stats.mappedObjects.tilemapMaps++;\r\n                    break;\r\n                case 'TilemapLayer':\r\n                    this._stats.mappedObjects.tilemapMaps++;\r\n                    break;\r\n                case 'MatterBody':\r\n                    this._stats.mappedObjects.matterMaps++;\r\n                    break;\r\n                default:\r\n                    this._stats.mappedObjects.rectangleMaps++;\r\n            }\r\n        }\r\n\r\n        this._stats.mappedObjects.total = this.mappedObjects.length;\r\n        this._stats.mappedObjects.static = this._stats.mappedObjects.total - this.dynamicMappedObjects.length;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n    * Remove game object's {@link Raycaster.Map Raycaster.Map} maps.\r\n    *\r\n    * @method Raycaster#removeMappedObjects\r\n    * @memberof Raycaster\r\n    * @instance\r\n    * @since 0.6.0\r\n    *\r\n    * @param {(object|object[])} objects - Game object or array of game objects which maps will be removed.\r\n    *\r\n    * @return {Raycaster} {@link Raycaster Raycaster} instance\r\n    */\r\n    removeMappedObjects: function(objects) {\r\n        if(!Array.isArray(objects))\r\n            objects = [objects];\r\n\r\n        for(let object of objects) {\r\n            //remove object from mapped objects list\r\n            let index = this.mappedObjects.indexOf(object);\r\n            if(index >= 0)\r\n                this.mappedObjects.splice(index, 1);\r\n            //remove object from dynamic mapped objects list\r\n            index = this.dynamicMappedObjects.indexOf(object);\r\n            if(index >= 0)\r\n                this.dynamicMappedObjects.splice(index, 1);\r\n            \r\n            if(object.type === 'body' || object.type === 'composite')\r\n                object.raycasterMap.destroy();\r\n            else\r\n                object.data.get('raycasterMap').destroy();\r\n            \r\n            //update stats            \r\n            switch(object.type) {\r\n                case 'Polygon':\r\n                    this._stats.mappedObjects.polygonMaps--;\r\n                    break;\r\n                case 'Arc':\r\n                    this._stats.mappedObjects.circleMaps--;\r\n                    break;\r\n                case 'Line':\r\n                    this._stats.mappedObjects.lineMaps--;\r\n                    break;\r\n                case 'Container':\r\n                    this._stats.mappedObjects.containerMaps--;\r\n                    break;\r\n                case 'StaticTilemapLayer':\r\n                    this._stats.mappedObjects.tilemapMaps--;\r\n                    break;\r\n                case 'DynamicTilemapLayer':\r\n                    this._stats.mappedObjects.tilemapMaps--;\r\n                    break;\r\n                case 'TilemapLayer':\r\n                    this._stats.mappedObjects.tilemapMaps--;\r\n                    break;\r\n                case 'MatterBody':\r\n                    this._stats.mappedObjects.matterMaps--;\r\n                    break;\r\n                default:\r\n                    this._stats.mappedObjects.rectangleMaps--;\r\n            }\r\n        }\r\n\r\n        this._stats.mappedObjects.total = this.mappedObjects.length;\r\n        this._stats.mappedObjects.dynamic = this.dynamicMappedObjects.length;\r\n        this._stats.mappedObjects.static = this._stats.mappedObjects.total - this.dynamicMappedObjects.length;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n    * Enable game object's {@link Raycaster.Map Raycaster.Map} maps.\r\n    *\r\n    * @method Raycaster#enableMaps\r\n    * @memberof Raycaster\r\n    * @instance\r\n    * @since 0.7.2\r\n    *\r\n    * @param {(object|object[])} objects - Game object or array of game objects which maps will be enabled.\r\n    *\r\n    * @return {Raycaster} {@link Raycaster Raycaster} instance\r\n    */\r\n    enableMaps: function(objects) {\r\n        if(!Array.isArray(objects))\r\n            objects = [objects];\r\n        \r\n        for(let object of objects) {\r\n            let map;\r\n\r\n            if(object.type === 'body' || object.type === 'composite') {\r\n                map = object.raycasterMap;\r\n            }\r\n            else if(object.data) {\r\n                map = object.data.get('raycasterMap');\r\n            }\r\n\r\n            if(map)\r\n                map.active = true;\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n    * Disable game object's {@link Raycaster.Map Raycaster.Map} maps.\r\n    *\r\n    * @method Raycaster#disableMaps\r\n    * @memberof Raycaster\r\n    * @instance\r\n    * @since 0.7.2\r\n    *\r\n    * @param {(object|object[])} objects - Game object or array of game objects which maps will be disabled.\r\n    *\r\n    * @return {Raycaster} {@link Raycaster Raycaster} instance\r\n    */\r\n    disableMaps: function(objects) {\r\n        if(!Array.isArray(objects))\r\n            objects = [objects];\r\n        \r\n        for(let object of objects) {\r\n            let map;\r\n\r\n            if(object.type === 'body' || object.type === 'composite') {\r\n                map = object.raycasterMap;\r\n            }\r\n            else if(object.data) {\r\n                map = object.data.get('raycasterMap');\r\n            }\r\n\r\n            if(map)\r\n                map.active = false;\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n    * Updates all {@link Raycaster.Map Raycaster.Map} dynamic maps. Fired on Phaser.Scene update event.\r\n    *\r\n    * @method Raycaster#update\r\n    * @memberof Raycaster\r\n    * @instance\r\n    * @since 0.6.0\r\n    * \r\n    * @return {Raycaster} {@link Raycaster Raycaster} instance\r\n    */\r\n    update: function() {\r\n        //update dynamic maps\r\n        if(this.dynamicMappedObjects.length > 0) {\r\n            for(let mapppedObject of this.dynamicMappedObjects) {\r\n                let map;\r\n\r\n                if(mapppedObject.type === 'body' || mapppedObject.type === 'composite') {\r\n                    map = mapppedObject.raycasterMap;\r\n                }\r\n                else if(mapppedObject.data) {\r\n                    map = mapppedObject.data.get('raycasterMap');\r\n                }\r\n\r\n                if(!map)\r\n                    continue;\r\n\r\n                if(map.active) {\r\n                    map.updateMap();\r\n                }\r\n            }\r\n        }\r\n\r\n        //debug\r\n        if(this.debugOptions.enabled)\r\n            this.drawDebug();\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n    * Create {@link Raycaster.Ray Raycaster.Ray} object.\r\n    *\r\n    * @method Raycaster#createRay\r\n    * @memberof Raycaster\r\n    * @instance\r\n    * @since 0.6.0\r\n    *\r\n    * @param {object} [options] - Ray's congfiguration options. May include:\r\n    * @param {Phaser.Geom.Point|Point} [options.origin = {x:0, y:0}] - Ray's position.\r\n    * @param {number} [options.angle = 0] - Ray's angle in radians.\r\n    * @param {number} [options.angleDeg = 0] - Ray's angle in degrees.\r\n    * @param {number} [options.cone = 0] - Ray's cone angle in radians.\r\n    * @param {number} [options.coneDeg = 0] - Ray's cone angle in degrees.\r\n    * @param {number} [options.range = Phaser.Math.MAX_SAFE_INTEGER] - Ray's range.\r\n    * @param {number} [options.collisionRange = Phaser.Math.MAX_SAFE_INTEGER] - Ray's maximum collision range of ray's field of view.\r\n    * @param {number} [options.detectionRange = Phaser.Math.MAX_SAFE_INTEGER] - Maximum distance between ray's position and tested objects bounding boxes.\r\n    * @param {boolean} [options.ignoreNotIntersectedRays = true] - If set true, ray returns false when it didn't hit anything. Otherwise returns ray's target position.\r\n    * @param {boolean} [options.autoSlice = false] - If set true, ray will automatically slice intersections into array of triangles and store it in {@link Raycaster.Ray#slicedIntersections Ray.slicedIntersections}.\r\n    * @param {boolean} [options.round = false] - If set true, point where ray hit will be rounded.\r\n    * @param {(boolean|'arcade'|'matter')} [options.enablePhysics = false] - Add to ray physics body. Body will be a circle with radius equal to {@link Raycaster.Ray#collisionRange Ray.collisionRange}. If set true, arcade physics body will be added.\r\n    *\r\n    * @return {Raycaster.Ray} {@link Raycaster.Ray Raycaster.Ray} instance\r\n    */\r\n    createRay: function(options = {}) {\r\n        return new this.Ray(options, this);\r\n    },\r\n\r\n    /**\r\n    * Get raycaster statistics.\r\n    *\r\n    * @method Raycaster#getStats\r\n    * @memberof Raycaster\r\n    * @instance\r\n    * @since 0.10.0\r\n    *\r\n    * @return {object} Raycaster statistics.\r\n    */\r\n    getStats: function() {\r\n        return this._stats;\r\n    },\r\n\r\n    /**\r\n    * Draw maps in debug mode\r\n    *\r\n    * @method Raycaster#drawDebug\r\n    * @memberof Raycaster\r\n    * @private\r\n    * @since 0.10.0\r\n    * \r\n    * @return {Raycaster} {@link Raycaster Raycaster} instance\r\n    */\r\n     drawDebug: function() {\r\n        if(this.graphics === undefined || !this.debugOptions.enabled)\r\n            return this;\r\n\r\n        //clear\r\n        this.graphics.clear();\r\n\r\n        if(!this.debugOptions.maps)\r\n            return this;\r\n            \r\n        for(let object of this.mappedObjects)\r\n        {\r\n            let map;\r\n        \r\n            if(object.type === 'body' || object.type === 'composite')\r\n                map = object.raycasterMap;\r\n            else if(object.data)\r\n                map = object.data.get('raycasterMap');\r\n            \r\n            if(!map)\r\n                continue;\r\n\r\n            //draw bounding box\r\n            if(this.debugOptions.graphics.mapBoundingBox) {\r\n                this.graphics.lineStyle(1, this.debugOptions.graphics.mapBoundingBox);\r\n                this.graphics.strokeRectShape(map.getBoundingBox());\r\n            }\r\n\r\n            //draw segments\r\n            if(this.debugOptions.graphics.mapSegment) {\r\n                this.graphics.lineStyle(1, this.debugOptions.graphics.mapSegment);\r\n                for(let segment of map.getSegments()) {\r\n                    this.graphics.strokeLineShape(segment);\r\n                }\r\n            }\r\n\r\n            //draw points\r\n            if(this.debugOptions.graphics.mapPoint) {\r\n                this.graphics.fillStyle(this.debugOptions.graphics.mapPoint);\r\n                for(let point of map.getPoints()) {\r\n                    this.graphics.fillPoint(point.x, point.y, 3)\r\n                }\r\n            }\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Destroy object and all mapped objects.\r\n     *\r\n     * @method Raycaster#destroy\r\n     * @memberof Raycaster\r\n     * @instance\r\n     * @since 0.10.3\r\n     */\r\n    destroy: function() {\r\n        this.removeMappedObjects(this.mappedObjects);\r\n        \r\n        if(this.graphics)\r\n            this.graphics.destroy();\r\n        \r\n        if(this.scene) {\r\n            this.scene.events.removeListener('update', null, this);\r\n        }\r\n\r\n        for(let key in this) {\r\n            delete this[key];\r\n        }\r\n    }\r\n}\r\n\r\nRaycaster.prototype.Map = require('./map/map-core.js').Map;\r\nRaycaster.prototype.Ray = require('./ray/ray-core.js').Ray;\r\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = function(exports, definition) {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","// define __esModule on exports\n__webpack_require__.r = function(exports) {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(880);\n"],"names":["root","factory","exports","module","define","amd","self","PhaserRaycaster","Phaser","Plugins","ScenePlugin","scene","pluginManager","_Raycaster","require","options","this","getBoundingBox","object","getBounds","rectangle","line","polygon","arc","container","tilemap","matterBody","segmentCount","boundingBox","config","undefined","type","getPoints","getSegments","updateMap","circle","setSegmentCount","mapChild","_circles","_updateChildMap","collisionTiles","setCollisionTiles","setOrigin","forceConvex","forceVerticesMapping","notSupported","dynamic","active","destroy","key","raycasterMap","data","remove","ray","_points","length","points","offset","Geom","Point","x","displayWidth","originX","y","displayHeight","originY","c","rayA","Line","rayB","rotation","vector","SetToAngle","Angle","Length","cB","getPointB","origin","rayLength","Math","sqrt","pow","radius","scaleX","angle","dAngle","asin","push","_segments","scaleY","geom","segments","newPoints","point","i","isChild","_raycaster","createRay","iterate","child","bind","iLength","list","childA","mapA","get","j","jLength","childB","mapB","Intersects","RectangleToRectangle","segmentA","segmentB","intersection","LineToLine","setDataEnabled","map","constructor","set","childPoints","segment","pointA","getPointA","pointB","vectorA","vectorB","circleOffset","Circle","childMapCircle","Map","raycaster","_dynamic","prototype","dynamicMappedObjects","_stats","mappedObjects","static","total","index","indexOf","splice","body","circleRadius","position","scale","bodies","generateBounds","bounds","bodyItem","parts","vertices","find","segmentIndex","findIndex","x1","y1","x2","y2","closingSegment","matter","composite","Rectangle","min","max","closePath","last","getTopLeft","getTopRight","getBottomRight","getBottomLeft","detectionRange","MAX_SAFE_INTEGER","Distance","Between","LineToCircle","detectionRangeCircle","horizontal","horizontals","verticals","layer","row","tile","upperEdge","includes","leftEdge","vertical","height","width","tileWidth","tileHeight","verticalsLastColumn","column","filter","horizontalSegment","tiles","count","setAngle","Normalize","_ray","rayRange","setAngleDeg","DegToRad","cast","closestIntersection","closestSegment","closestObject","closestDistance","internal","startTime","performance","now","stats","method","rays","testedMappedObjects","hitMappedObjects","time","intersections","GetLineToRectangle","distance","target","objects","result","_boundingBox","setTo","Equals","isTangent","circleIntersections","GetLineToCircle","ignoreNotIntersectedRays","round","drawDebug","castCircle","originalAngle","maps","rayTargets","testedObjects","boundsInRange","objectB","sort","a","b","previousTarget","castSides","roundedTarget","intersectionA","intersectionB","autoSlice","slicedIntersections","slice","castCone","cone","minAngle","maxAngle","coneDeg","angleOffsetDeg","RadToDeg","ShortestBetween","abs","setCone","setConeDeg","angleDeg","collisionRange","enablePhysics","debugOptions","enabled","graphics","add","lineStyle","color","fillStyle","setDepth","clear","strokeLineShape","rayPoint","fillPoint","collisionCircle","bodyType","gameObject","shape","centerX","centerY","label","isSensor","ignoreGravity","setOnCollideActive","physics","existing","setCircle","setAllowGravity","setImmovable","setCollisionCategory","value","collisionFilter","category","setCollisionGroup","group","setCollidesWith","categories","flags","Array","isArray","mask","setOnCollide","callback","onCollideCallback","collisionInfo","rayCollided","processOverlap","setOnCollideEnd","onCollideEndCallback","onCollideActiveCallback","bodyA","bodyB","onCollideWith","id","setOnCollideWith","func","src","hasOwnProperty","overlap","targets","overlapCircle","query","collides","getMatterBodies","testMatterOverlap","overlapCirc","hitbox","isCircle","halfWidth","testArcadeOverlap","CircleToCircle","CircleToRectangle","object1","object2","obj1","obj2","TriangleToCircle","RectangleToTriangle","part","TriangleToLine","Triangle","ContainsPoint","setRayRange","setDetectionRange","setCollisionRange","oldRangeMax","setRadius","isStatic","objectBounds","Ray","getStats","setRay","closed","slices","Raycaster","version","mapPoint","mapSegment","mapBoundingBox","rectangleMaps","polygonMaps","circleMaps","lineMaps","containerMaps","tilemapMaps","matterMaps","mapSegmentCount","world","walls","top","bottom","setOptions","autoUpdate","events","on","update","debug","Object","assign","mapGameObjects","setBoundingBox","left","right","option","removeMappedObjects","enableMaps","disableMaps","mapppedObject","strokeRectShape","removeListener","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","d","definition","o","defineProperty","enumerable","obj","prop","call","r","Symbol","toStringTag"],"sourceRoot":""}