/*
* Andreas: I autogenerated this file using the PhaserTypeDefExtractor.exe I wrote for it.
*/

/**
 * @callback DataEachCallback
 *
 * @param {*} parent - The parent object of the DataManager.
 * @param {string} key - The key of the value.
 * @param {*} value - The value.
 * @param {...*} [args] - Additional arguments that will be passed to the callback, after the game object, key, and data.
 */
/**
 * @callback ContentLoadedCallback
 */
/**
 * @callback EachListCallback<I>
 *
 * @param {I} item - The item which is currently being processed.
 * @param {...*} [args] - Additional arguments that will be passed to the callback, after the child.
 */
/**
 * @callback EachMapCallback<E>
 *
 * @param {string} key - The key of the Map entry.
 * @param {E} entry - The value of the Map entry.
 *
 * @return {?boolean} The callback result.
 */
/**
 * @callback EachSetCallback<E>
 *
 * @param {E} entry - The Set entry.
 * @param {number} index - The index of the entry within the Set.
 *
 * @return {?boolean} The callback result.
 */
/**
 * @callback EachTextureCallback
 *
 * @param {Phaser.Textures.Texture} texture - Each texture in Texture Manager.
 * @param {...*} [args] - Additional arguments that will be passed to the callback, after the child.
 */
/**
 * A predicate, to test each element of the array.
 *
 * @callback TilemapFilterCallback
 *
 * @param {Phaser.GameObjects.GameObject} value - An object found in the filtered area.
 * @param {number} index - The index of the object within the array.
 * @param {Phaser.GameObjects.GameObject[]} array - An array of all the objects found.
 *
 * @return {boolean} A value that coerces to `true` to keep the element, or to `false` otherwise.
 */
/**
 * @callback TilemapFindCallback
 *
 * @param {Phaser.GameObjects.GameObject} value - An object found.
 * @param {number} index - The index of the object within the array.
 * @param {Phaser.GameObjects.GameObject[]} array - An array of all the objects found.
 *
 * @return {boolean} `true` if the callback should be invoked, otherwise `false`.
 */
/**
 * @callback Phaser.Types.Actions.CallCallback
 * @since 3.0.0
 *
 * @param {Phaser.GameObjects.GameObject} item - The Game Object to run the callback on.
 */
/**
 * @callback Phaser.Types.Core.BootCallback
 * @since 3.0.0
 *
 * @param {Phaser.Game} game - The game.
 */
/**
 * This callback type is completely empty, a no-operation.
 *
 * @callback Phaser.Types.Core.NOOP
 * @since 3.0.0
 */
/**
 * @callback Phaser.Types.Core.TimeStepCallback
 * @since 3.0.0
 *
 * @param {number} time - The current time. Either a High Resolution Timer value if it comes from Request Animation Frame, or Date.now if using SetTimeout.
 * @param {number} average - The Delta average.
 */
/**
 * @callback Phaser.Types.Create.GenerateTextureCallback
 * @since 3.0.0
 *
 * @param {HTMLCanvasElement} canvas - The HTML Canvas element to operate on.
 * @param {CanvasRenderingContext2D} context - The context of the HTML Canvas element.
 */
/**
 * @callback CreateCallback
 *
 * @param {Phaser.GameObjects.Bob} bob - The Bob that was created by the Blitter.
 * @param {number} index - The position of the Bob within the Blitter display list.
 */
/**
     * @callback EachContainerCallback
     * @generic I - [item]
     *
     * @param {*} item - The child Game Object of the Container.
     * @param {...*} [args] - Additional arguments that will be passed to the callback, after the child.
     */
/**
 * @callback LightForEach
 *
 * @param {Phaser.GameObjects.Light} light - The Light.
 */
/**
 * @callback CenterFunction
 *
 * @param {Phaser.Geom.Triangle} triangle - The Triangle to return the center coordinates of.
 *
 * @return {Phaser.Math.Vector2} The center point of the Triangle according to the function.
 */
/**
 * @callback Phaser.Types.Input.HitAreaCallback
 * @since 3.0.0
 *
 * @param {any} hitArea - The hit area object.
 * @param {number} x - The translated x coordinate of the hit test event.
 * @param {number} y - The translated y coordinate of the hit test event.
 * @param {Phaser.GameObjects.GameObject} gameObject - The Game Object that invoked the hit test.
 *
 * @return {boolean} `true` if the coordinates fall within the space of the hitArea, otherwise `false`.
 */
/**
 * @callback WebGLContextCallback
 *
 * @param {Phaser.Renderer.WebGL.WebGLRenderer} renderer - The WebGL Renderer which owns the context.
 */
/**
 * Can be defined on your own Scenes. Use it to create your game objects.
 * This method is called by the Scene Manager when the scene starts, after `init()` and `preload()`.
 * If the LoaderPlugin started after `preload()`, then this method is called only after loading is complete.
 *
 * @callback Phaser.Types.Scenes.SceneCreateCallback
 * @since 3.0.0
 *
 * @this Phaser.Scene
 * @param {object} data - Any data passed via `ScenePlugin.add()` or `ScenePlugin.start()`. Same as Scene.settings.data.
 */
/**
 * Can be defined on your own Scenes.
 * This method is called by the Scene Manager when the scene starts, before `preload()` and `create()`.
 *
 * @callback Phaser.Types.Scenes.SceneInitCallback
 * @since 3.0.0
 *
 * @this Phaser.Scene
 * @param {object} data - Any data passed via `ScenePlugin.add()` or `ScenePlugin.start()`. Same as Scene.settings.data.
 */
/**
 * Can be defined on your own Scenes. Use it to load assets.
 * This method is called by the Scene Manager, after `init()` and before `create()`, only if the Scene has a LoaderPlugin.
 * After this method completes, if the LoaderPlugin's queue isn't empty, the LoaderPlugin will start automatically.
 *
 * @callback Phaser.Types.Scenes.ScenePreloadCallback
 * @since 3.0.0
 *
 * @this Phaser.Scene
 */
/**
 * @callback Phaser.Types.Scenes.SceneTransitionOnStartCallback
 * @since 3.60.0
 *
 * @this Phaser.Scene
 * @param {Phaser.Scene} fromScene - Scene instance to transition from.
 * @param {Phaser.Scene} toScene - Scene instance to transition to.
 * @property {number} [duration=1000] - The duration, in ms, for the transition to last.
 */
/**
 * @callback Phaser.Types.Scenes.SceneUpdateCallback
 * @since 3.0.0
 *
 * @this Phaser.Scene
 * @param {number} time - The current time. Either a High Resolution Timer value if it comes from Request Animation Frame, or Date.now if using SetTimeout.
 * @param {number} delta - The delta time in ms since the last frame. This is a smoothed and capped value based on the FPS rate.
 */
/**
 * @callback Phaser.Types.Sound.EachActiveSoundCallback
 * @since 3.0.0
 *
 * @param {Phaser.Sound.BaseSoundManager} manager - The SoundManager
 * @param {Phaser.Sound.BaseSound} sound - The current active Sound
 * @param {number} index - The index of the current active Sound
 * @param {Phaser.Sound.BaseSound[]} sounds - All sounds
 */
/**
 * @callback FindTileCallback
 *
 * @param {Phaser.Tilemaps.Tile} value - The Tile.
 * @param {number} index - The index of the tile.
 * @param {Phaser.Tilemaps.Tile[]} array - An array of Tile objects.
 *
 * @return {boolean} Return `true` if the callback should run, otherwise `false`.
 */
/**
 * @callback EachTileCallback
 *
 * @param {Phaser.Tilemaps.Tile} value - The Tile.
 * @param {number} index - The index of the tile.
 * @param {Phaser.Tilemaps.Tile[]} array - An array of Tile objects.
 */
/**
 * @callback Phaser.Types.Tilemaps.CreateFromObjectsClassTypeConstructor
 * @since 3.60.0
 *
 * @param {Phaser.Scene} scene - The Scene to which this Game Object belongs.
 */
/**
 * @callback Phaser.Types.Tweens.GetActiveCallback
 * @since 3.19.0
 *
 * @param {any} target - The tween target.
 * @param {string} key - The target property.
 * @param {number} value - The current value of the target property.
 * @param {number} targetIndex - The index of the target within the Tween.
 * @param {number} totalTargets - The total number of targets in this Tween.
 * @param {Phaser.Tweens.Tween} tween - The Tween that invoked this callback.
 *
 * @return {number} - The new value.
 */
/**
 * @callback Phaser.Types.Tweens.GetEndCallback
 * @since 3.18.0
 *
 * @param {any} target - The tween target.
 * @param {string} key - The target property.
 * @param {number} value - The current value of the target property.
 * @param {number} targetIndex - The index of the target within the Tween.
 * @param {number} totalTargets - The total number of targets in this Tween.
 * @param {Phaser.Tweens.Tween} tween - The Tween that invoked this callback.
 *
 * @return {number} - The new value.
 */
/**
 * @callback Phaser.Types.Tweens.GetStartCallback
 * @since 3.18.0
 *
 * @param {any} target - The tween target.
 * @param {string} key - The target property.
 * @param {number} value - The current value of the target property.
 * @param {number} targetIndex - The index of the target within the Tween.
 * @param {number} totalTargets - The total number of targets in this Tween.
 * @param {Phaser.Tweens.Tween} tween - The Tween that invoked this callback.
 *
 * @return {number} - The new value.
 */
/**
 * @callback Phaser.Types.Tweens.TweenOnActiveCallback
 * @since 3.19.0
 *
 * @param {Phaser.Tweens.Tween} tween - A reference to the Tween.
 * @param {(any|any[])} targets - The targets of the Tween. If this Tween has multiple targets this will be an array of the targets.
 * @param {...any} param - Any value passed in `onActiveParams`.
 */
/**
 * @callback Phaser.Types.Tweens.TweenOnCompleteCallback
 * @since 3.18.0
 *
 * @param {Phaser.Tweens.Tween} tween - A reference to the Tween.
 * @param {(any|any[])} targets - The targets of the Tween. If this Tween has multiple targets this will be an array of the targets.
 * @param {...any} param - Any value passed in `onCompleteParams`.
 */
/**
 * @callback Phaser.Types.Tweens.TweenOnLoopCallback
 * @since 3.18.0
 *
 * @param {Phaser.Tweens.Tween} tween - A reference to the Tween.
 * @param {(any|any[])} targets - The targets of the Tween. If this Tween has multiple targets this will be an array of the targets.
 * @param {...any} param - Any value passed in `onLoopParams`.
 */
/**
 * @callback Phaser.Types.Tweens.TweenOnPauseCallback
 * @since 3.60.0
 *
 * @param {Phaser.Tweens.Tween} tween - A reference to the Tween.
 * @param {(any|any[])} targets - The targets of the Tween. If this Tween has multiple targets this will be an array of the targets.
 * @param {...any} param - Any value passed in `onPauseParams`.
 */
/**
 * @callback Phaser.Types.Tweens.TweenOnRepeatCallback
 * @since 3.18.0
 *
 * @param {Phaser.Tweens.Tween} tween - A reference to the Tween.
 * @param {any} target - The current target of the Tween. If this Tween has multiple targets, this will be a reference to just the single one being updated prior to this callback.
 * @param {string} key - The property that is being updated on the target.
 * @param {number} current - The current value of the property being set on the target.
 * @param {number} previous - The previous value of the property being set on the target.
 * @param {...any} param - Any value passed in `onRepeatParams`.
 */
/**
 * @callback Phaser.Types.Tweens.TweenOnResumeCallback
 * @since 3.60.0
 *
 * @param {Phaser.Tweens.Tween} tween - A reference to the Tween.
 * @param {(any|any[])} targets - The targets of the Tween. If this Tween has multiple targets this will be an array of the targets.
 * @param {...any} param - Any value passed in `onPauseParams`.
 */
/**
 * @callback Phaser.Types.Tweens.TweenOnStartCallback
 * @since 3.18.0
 *
 * @param {Phaser.Tweens.Tween} tween - A reference to the Tween.
 * @param {(any|any[])} targets - The targets of the Tween. If this Tween has multiple targets this will be an array of the targets.
 * @param {...any} param - Any value passed in `onStartParams`.
 */
/**
 * @callback Phaser.Types.Tweens.TweenOnStopCallback
 * @since 3.24.0
 *
 * @param {Phaser.Tweens.Tween} tween - A reference to the Tween.
 * @param {(any|any[])} targets - The targets of the Tween. If this Tween has multiple targets this will be an array of the targets.
 * @param {...any} param - Any value passed in `onStopParams`.
 */
/**
 * @callback Phaser.Types.Tweens.TweenOnUpdateCallback
 * @since 3.18.0
 *
 * @param {Phaser.Tweens.Tween} tween - A reference to the Tween.
 * @param {any} target - The current target of the Tween. If this Tween has multiple targets, this will be a reference to just the single one being updated prior to this callback.
 * @param {string} key - The property that is being updated on the target.
 * @param {number} current - The current value of the property being set on the target.
 * @param {number} previous - The previous value of the property being set on the target.
 * @param {...any} param - Any value passed in `onUpdateParams`.
 */
/**
 * @callback Phaser.Types.Tweens.TweenOnYoyoCallback
 * @since 3.18.0
 *
 * @param {Phaser.Tweens.Tween} tween - A reference to the Tween.
 * @param {any} target - The current target of the Tween. If this Tween has multiple targets, this will be a reference to just the single one being updated prior to this callback.
 * @param {string} key - The property that is being updated on the target.
 * @param {number} current - The current value of the property being set on the target.
 * @param {number} previous - The previous value of the property being set on the target.
 * @param {...any} param - Any value passed in `onYoyoParams`.
 */
/**
         * @callback CameraRotateCallback
         *
         * @param {Phaser.Cameras.Scene2D.Camera} camera - The camera on which the effect is running.
         * @param {number} progress - The progress of the effect. A value between 0 and 1.
         * @param {number} angle - The Camera's new angle in radians.
         */
/**
 * @callback Phaser.Types.Cameras.Scene2D.CameraFadeCallback
 * @since 3.5.0
 *
 * @param {Phaser.Cameras.Scene2D.Camera} camera - The camera on which the effect is running.
 * @param {number} progress - The progress of the effect. A value between 0 and 1.
 */
/**
 * @callback Phaser.Types.Cameras.Scene2D.CameraFlashCallback
 * @since 3.5.0
 *
 * @param {Phaser.Cameras.Scene2D.Camera} camera - The camera on which the effect is running.
 * @param {number} progress - The progress of the effect. A value between 0 and 1.
 */
/**
 * @callback Phaser.Types.Cameras.Scene2D.CameraPanCallback
 * @since 3.5.0
 *
 * @param {Phaser.Cameras.Scene2D.Camera} camera - The camera on which the effect is running.
 * @param {number} progress - The progress of the effect. A value between 0 and 1.
 * @param {number} x - The Camera's new scrollX coordinate.
 * @param {number} y - The Camera's new scrollY coordinate.
 */
/**
 * @callback Phaser.Types.Cameras.Scene2D.CameraShakeCallback
 * @since 3.5.0
 *
 * @param {Phaser.Cameras.Scene2D.Camera} camera - The camera on which the effect is running.
 * @param {number} progress - The progress of the effect. A value between 0 and 1.
 */
/**
 * @callback Phaser.Types.Cameras.Scene2D.CameraZoomCallback
 * @since 3.11.0
 *
 * @param {Phaser.Cameras.Scene2D.Camera} camera - The camera on which the effect is running.
 * @param {number} progress - The progress of the effect. A value between 0 and 1.
 * @param {number} zoom - The Camera's new zoom value.
 */
/**
 * @callback Phaser.Types.GameObjects.BitmapText.DisplayCallback
 *
 * @param {Phaser.Types.GameObjects.BitmapText.DisplayCallbackConfig} display - Settings of the character that is about to be rendered.
 *
 * @return {Phaser.Types.GameObjects.BitmapText.DisplayCallbackConfig} Altered position, scale and rotation values for the character that is about to be rendered.
 */
/**
 * @callback Phaser.Types.GameObjects.Group.GroupCallback
 * @since 3.0.0
 *
 * @param {Phaser.GameObjects.GameObject} item - A group member
 */
/**
 * @callback Phaser.Types.GameObjects.Group.GroupClassTypeConstructor
 * @since 3.0.0
 *
 * @param {Phaser.Scene} scene - The Scene to which this Game Object belongs.
 * @param {number} x - The horizontal position of this Game Object in the world.
 * @param {number} y - The vertical position of this Game Object in the world.
 * @param {(string|Phaser.Textures.Texture)} texture - The key, or instance of the Texture this Game Object will use to render with, as stored in the Texture Manager.
 * @param {(string|number)} [frame] - An optional frame from the Texture this Game Object is rendering with.
 */
/**
 * @callback Phaser.Types.GameObjects.Group.GroupMultipleCreateCallback
 * @since 3.0.0
 *
 * @param {Phaser.GameObjects.GameObject[]} items - The newly created group members
 */
/**
 * @callback Phaser.Types.GameObjects.Particles.DeathZoneSourceCallback
 * @since 3.0.0
 *
 * @param {number} x - The x coordinate of the particle to check against this source area.
 * @param {number} y - The y coordinate of the particle to check against this source area.
 *
 * @return {boolean} - True if the coordinates are within the source area.
 */
/**
 * @callback Phaser.Types.GameObjects.Particles.EdgeZoneSourceCallback
 * @since 3.0.0
 *
 * @param {number} quantity - The number of particles to place on the source edge. If 0, `stepRate` should be used instead.
 * @param {number} [stepRate] - The distance between each particle. When set, `quantity` is implied and should be set to `0`.
 *
 * @return {Phaser.Types.Math.Vector2Like[]} - The points placed on the source edge.
 */
/**
 * The returned value sets what the property will be at the START of the particle's life, on emit.
 * 
 * @callback Phaser.Types.GameObjects.Particles.EmitterOpOnEmitCallback
 * @since 3.0.0
 *
 * @param {Phaser.GameObjects.Particles.Particle} particle - The particle.
 * @param {string} key - The name of the property.
 * @param {number} value - The current value of the property.
 *
 * @return {number} The new value of the property.
 */
/**
 * The returned value updates the property for the duration of the particle's life.
 * 
 * @callback Phaser.Types.GameObjects.Particles.EmitterOpOnUpdateCallback
 * @since 3.0.0
 *
 * @param {Phaser.GameObjects.Particles.Particle} particle - The particle.
 * @param {string} key - The name of the property.
 * @param {number} t - The normalized lifetime of the particle, between 0 (start) and 1 (end).
 * @param {number} value - The current value of the property.
 *
 * @return {number} The new value of the property.
 */
/**
 * @callback Phaser.Types.GameObjects.Particles.ParticleClassConstructor
 * @since 3.0.0
 *
 * @param {Phaser.GameObjects.Particles.ParticleEmitter} emitter - The Emitter to which this Particle belongs.
*/
/**
 * @callback Phaser.Types.GameObjects.Particles.ParticleDeathCallback
 * @since 3.0.0
 *
 * @param {Phaser.GameObjects.Particles.Particle} particle - The particle that died.
*/
/**
 * @callback Phaser.Types.GameObjects.Particles.ParticleEmitterCallback
 * @since 3.0.0
 *
 * @param {Phaser.GameObjects.Particles.Particle} particle - The particle associated with the call.
 * @param {Phaser.GameObjects.Particles.ParticleEmitter} emitter - This particle emitter associated with the call.
 */
/**
 * @callback Phaser.Types.GameObjects.Particles.ParticleSortCallback
 * @since 3.60.0
 *
 * @param {Phaser.GameObjects.Particles.Particle} a - The first Particle being compared.
 * @param {Phaser.GameObjects.Particles.Particle} b - The second Particle being compared.
*/
/**
 * @callback Phaser.Types.GameObjects.Particles.RandomZoneSourceCallback
 * @since 3.0.0
 *
 * @param {Phaser.Types.Math.Vector2Like} point - A point to modify.
 */
/**
 * A custom function that will be responsible for wrapping the text.
 * @callback TextStyleWordWrapCallback
 *
 * @param {string} text - The string to wrap.
 * @param {Phaser.GameObjects.Text} textObject - The Text instance.
 *
 * @return {(string|string[])} Should return the wrapped lines either as an array of lines or as a string with
 * newline characters in place to indicate where breaks should happen.
 */
/**
 * @callback Phaser.Types.Input.Keyboard.KeyboardKeydownCallback
 * @since 3.0.0
 *
 * @param {KeyboardEvent} event - The Keyboard Event.
 */
/**
 * @callback Phaser.Types.Physics.Arcade.ArcadePhysicsCallback
 *
 * A callback receiving two Game Objects.
 *
 * When colliding a single sprite with a Group or TilemapLayer, `object1` is always the sprite.
 *
 * For all other cases, `object1` and `object2` match the same arguments in `collide()` or `overlap()`.
 *
 * @param {(Phaser.Types.Physics.Arcade.GameObjectWithBody|Phaser.Tilemaps.Tile)} object1 - The first Game Object.
 * @param {(Phaser.Types.Physics.Arcade.GameObjectWithBody|Phaser.Tilemaps.Tile)} object2 - The second Game Object.
 */
/**
 * @callback Phaser.Types.Renderer.Snapshot.SnapshotCallback
 * @since 3.16.1
 *
 * @param {(Phaser.Display.Color|HTMLImageElement)} snapshot - Either a Color object if a single pixel is being grabbed, or a new Image which contains a snapshot of the canvas contents.
 */
/**
 * An attractor function calculates the force to be applied
 * to `bodyB`, it should either:
 * - return the force vector to be applied to `bodyB`
 * - or apply the force to the body(s) itself
 * @callback AttractorFunction
 * @param {Matter.Body} bodyA
 * @param {Matter.Body} bodyB
 * @returns {(Vector|undefined)} a force vector (optional)
 */
